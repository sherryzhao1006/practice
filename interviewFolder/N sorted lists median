input:
[[2,1,3],[4,3,5],[4]]

1,2,3,3,4,4,5

output: 3



import java.util.*;
class Solution {
    public static void main(String[] args) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        lists.add(Arrays.asList(9, 6, 3));
        lists.add(Arrays.asList(8, 5, 2));
        lists.add(Arrays.asList(7, 4, 1));

        Answer ans = new Answer();
        int ret = ans.process(lists);
        System.out.println(ret);
    }
}

class Answer {
    List<List<Integer>> lists;
    int count;
    PriorityQueue<Item> heap;

    public int process(List<List<Integer>> lists) {
        this.lists = lists;
        this.count = 0;
        heap = new PriorityQueue<Item>(100, new Comparator<Item>() {
            @Override
            public int compare(Item o1, Item o2) {
                return ((Integer) o1.val).compareTo(o2.val);
            }
        })

        for (int i = 0; i < lists.size(); i++) {
            List<Integer> list = lists.get(i);
            count += list.size();
            Collections.sort(list);
            if (!list.isEmpty()) {
                heap.add(new Item(list.get(0), i, 0));
            }
        }

        int idx = 0;
        while (!heap.isEmpty()) {
            Item item = heap.poll();
            if (idx == count / 2) {
                return item.val;
            } else {
                idx++;
            }
            if (item.col < lists.get(item.row).size() - 1) {
                heap.add(new Item(lists.get(item.row).get(item.col + 1), item.row, item.col + 1));
            }
        }

        return 0;
    }

}

class Item {
    int val;
    int row;
    int col;

    public Item(int val, int row, int col) {
        this.val = val;
        this.row = row;
        this.col = col;
    }
}
