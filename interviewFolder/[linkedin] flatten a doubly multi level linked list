1) Take "cur" pointer, which will point to head of the fist level of the list
2) Take "tail" pointer, which will point to end of the first level of the list
3) Repeat the below procedure while "curr" is not NULL.
    I) if current node has a child then
    a) append this new child list to the "tail"
        tail->next = cur->child
    b) find the last node of new child list and update "tail"
        tmp = cur->child;
        while (tmp->next != NULL)
            tmp = tmp->next;
        tail = tmp;
    II) move to the next node. i.e. cur = cur->next 

http://blog.csdn.net/craiglin1992/article/details/44917459

struct list
{
    int data;
    struct list *next;
    struct list *child;
};


void flattenList(Node head)
{
    /*Base case*/
    if (head == NULL)
       return;

    Node tmp;

    /* Find tail node of first level linked list */
    Node tail = head;
    while (tail.next != NULL)
        tail = tail.next;

    // One by one traverse through all nodes of first level
    // linked list till we reach the tail node
    Node cur = head;
    while (cur != tail)
    {
        // If current node has a child
        if (cur.child)
        {
            // then append the child at the end of current list
            tail.next = cur.child;

            // and update the tail to new last node
            tmp = cur.child;
            while (tmp.next)
                tmp = tmp.next;
            tail = tmp;
        }

        // Change current node
        cur = cur.next;
    }
}
