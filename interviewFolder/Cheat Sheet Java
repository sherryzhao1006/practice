http://www.mkyong.com/java/java-object-sorting-example-comparable-and-comparator/
Simple Comparator
===============
http://buttercola.blogspot.com/2015/08/leetcode-meeting-rooms.html
    public class IntervalComparator implements Comparator<Interval> {
        @Override
        public int compare(Interval a, Interval b) {
            return a.start - b.start;
        }
    }
Interval[] intervals
Arrays.sort(intervals, new IntervalComparator());


Collections.sort(list ,Collections.reverseOrder());
for an array
Arrays.sort(array, Collections.reverseOrder());
array should be “Integer” array not “int” array
For Example : 
Integer[] input = {5,7,7,8,8,10}; Arrays.sort(input,Collections.reverseOrder());

int[] input = {5,7,7,8,8,10};
Arrays.sort(input,Collections.reverseOrder()); << Error

        boolean[] validBoolean = new boolean[9];
        Arrays.fill(validBoolean,false);

List<List<Integer>> lists = new ArrayList<List<Integer>>(); lists.add(Arrays.asList(9, 6, 3));


StringBuilder Methods
=================

delete last char :br.deleteCharAt(index)
sb.insert(insertOpenParenIndex,"(");
sb.append("julia");
sb.length();
ArrayList Methods:
==============
list.addAll(list);
list.set(index,value);
remove last item :list.remove(list.size()-1);
remove certain obj : list.remove(object);

list.size()

Hashset
=======
remove certain obj: set.remove(元素)
size();
HashMap
=======
remove certain key:map.remove(key)
size();

Stack
=====
push/pop/peek

Queue
======
        Queue<Integer> q = new LinkedList<>();
        q.poll();
        q.peek();
        q.add(1);


String
======
str.charAt(i);
str.substring(start,end) => [start,end)

Equals and HashCode
====================

class Point {
    int x;
    int y;
    public Point(int x,int y) {
        this.x = x;
        this.y = y;
    }
    @Override
    public boolean equals(Object o) {
        if(!(o instanceof Point)) {
            return false;
        }
        Point p = (Point) o;
        if(p.x == x && p.y == y)
            return true;
        return false;
    }
    @Override
    public int hashCode() {
        return 100*x+y;
    }
}


Iterate through map
====================

for(Integer i:map.keySet())
==
OR
==
Iterator it = map.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
            char key = (char) pair.getKey();
            int val = (int) pair.getValue();
            
Iterator through hashset/list
===================
        for(int a : hs) {
            
        }
            
PriorityQueue
==============
PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(nums.length);
PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(nums.length, Collections.reverseOrder());
PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(k,new BlahComparator());


Read From File using BufferedReader
=====================================


try {
    String filename = "test.txt";
    File myFile = new File(filename);
    //filereader is a connection stream for characters, that connects to a text file
    FileReader fileReader = new FileReader(myFile);
    BufferedReader reader = new BufferedReader(fileReader);
    //BufferedReader: chain the file reader to a BufferedReader for more efficient reading.
    //it will go back to the file to read only  when the buffer is empty (because the program has read everything in it);
    
    String line = null;
    while((line = reader.readLine()) != null) {
        System.out.println(line);
    }
    reader.close();
} catch (Exception ex) {
    ex.printStackTrace();
}
