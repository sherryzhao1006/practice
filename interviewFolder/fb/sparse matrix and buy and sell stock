http://www.1point3acres.com/bbs/thread-117371-1-1.html

(1) sparse vector dot product。follow up: what if the number of nonzero elements of one vector is 10^10 and the other is 10^2, 
how can you make it faster?
http://www.cs.cmu.edu/~scandal/cacm/node9.html
A[0]*B[0]+A[1]*B[1]
如果都是sparse vectors,那思路就是把每个vector都表示成(index, non-zero value) pairs:
A =[0,2,0,2,0,0,3,0,0,4] ==> A={(1,2), (3,2), (6,3), (9,4)}==>(index,num[index])
B=[0,0,0,0,5,0,2,0,0,8]  ==> B={(4,5),        (6,2), (9,8)}

for each index i,  a = val of pair (i, v_in_A), b= val of pair (i, v_in_B)
dot_product(A,B) = sum_of ( a * b )  
A dot product B = 3*2 + 4*8 = 38

(2) stock leetcode原题。
follow up：stock II leetcode原题。another follow up: what if there are some transition fee for each transition?


    public int maxProfit(int[] prices) {
        if(prices == null || prices.length == 0) {
            return 0;
        }
        int maxProfit = 0;
        for(int i=1; i < prices.length; i++) {
            if(prices[i-1] < prices[i]) {
                maxProfit += prices[i] - prices[i-1];
            }    
        }
        return maxProfit;
    }
stock II leetcode原题。another follow up: what if there are some transition fee for each transition?
/*
price 2 10 12
tran  4 1  2
      

buy : 2+4=6, sell :10-1=9
if(sell > buy)
    maxProfit += sell-buy;
*/

public int maxProfit(int[] prices, int[] transFee) {
    if(prices == null || prices.length == 0) {
        return 0;
    }
    int maxProfit = 0;
    for(int i=1; i < prices.length; i++) {
        int buy = prices[i-1]+transFee[i-1];
        int sell = prices[i]-transFee[i-1];
        if(sell > buy) {
            maxProfit += sell-buy;
        }
    }    
    return maxProfit;
}
