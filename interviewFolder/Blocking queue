http://n00tc0d3r.blogspot.com/2013/08/implement-bounded-blocking-queue.html?q=queue



http://tutorials.jenkov.com/java-concurrency/blocking-queues.html
/*
There will never be two threads executing inside enqueue() , dequeue() or one in each. 
If a thread wakes a waiting thread, the awakened thread does not get to execute until the first thread has exited the enqueue() / dequeue() method. 
An awakened thread needs to get the lock of the BlockingQueue instance after being awakened, and that can only happen if the thread owning the lock leaves the synchronized method that took the lock.

two threads can't execute the two methods simulatneously 
*/



public class BlockingQueue{
    private List queue = new LinkedList();
    private int limit = 10;
    public BlockingQueue(int limit) {
        this.limit = limit;    
    }
    public synchronized void enqueue(Object item) {
        while(this.queue.size() == this.limit) {
            wait();
        }    
        if(this.queue.size() == 0) {
            notifyAll();
        }
        this.queue.add(item):
    }
    public synchronized Object dequeue() {
        while(this.queue.size() == 0) {
            wait();
        }
        if(this.queue.size() == this.limit) {
            notifyAll();
        }
        return this.queue.remove(0);
    }
}
