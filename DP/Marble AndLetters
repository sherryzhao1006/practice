http://codeforces.com/problemset/problem/180/C
http://codeforces.com/problemset/problem/38/E


import java.util.*;
import java.io.*;

//http://codeforces.com/problemset/problem/180/C

public class Solution {

    public static void main(String[] args) throws FileNotFoundException {
        char[][] board = {
                {'X' , 'X' , 'X' , 'X'},
                {'X' , 'O' , 'O' , 'X'},
                {'X' , 'X' , 'O' , 'X'},
                {'X' , 'O' , 'X' , 'X'}
        };
        solve(board);
        String s1 = new String("aabcc");
        String s2 = new String("dbbca");
        String s3 = new String("aadbbcbcac");
        String s4 = new String("aadbbbaccc");
        System.out.println(isInterleave(s1,s2,s3));
        System.out.println(isInterleave(s1,s2,s4));
        // Que2
        int[] coor = {1,2,3};
        int[] cost = {2,3,4};
        //int[] coor = {1,3,5,6};
        //int[] cost = {7,1,10,1};
        int n = coor.length;
        int[] dp = new int[n];
        System.out.println("min cost : " + minCost(coor,cost,0,n-1));
        // Que1
        String input = new String("helloworld");
        //String input = new String("IamIn");

        System.out.println("min modification : " + minModify(input));
    }
    public static int minModify(String input) {
        int n = input.length();
        int[] dpLeft = new int[n];
        int[] dpRight = new int[n];
        //dpLeft[i] count how many chars are lowercase in the left of i including i index
        //dpRight[i] count how many chars are uppercase in the right of i including i index
        dpLeft[0] = Character.isLowerCase(input.charAt(0))? 1: 0;
        dpRight[n-1] = Character.isUpperCase(input.charAt(n-1))? 1: 0;
        for(int i=1; i < n; i++) {
                dpLeft[i] += dpLeft[i-1];
                dpLeft[i] += Character.isLowerCase(input.charAt(i)) ?1:0;

        }
        for(int i=n-2; i >=0; i--) {
                dpRight[i] += dpRight[i+1];
                dpRight[i] += Character.isUpperCase(input.charAt(i)) ?1:0;

        }
        int min = Integer.MAX_VALUE;
        for(int i=0; i < n-1; i++) {
                min = Math.min(dpLeft[i] + dpRight[i + 1], min);

        }
        return min;
    }
    //http://codeforces.com/problemset/problem/38/E
    public static int minCost(int[] coor, int[] cost, int i,int n) {

        int min = Integer.MAX_VALUE;
        min = Math.min(dist(coor,i,n+1),min);
        for(int j=i+1; j <= n ; j++) {
            int currRes =  minCost(coor,cost,j,n) + dist(coor,i,j);
            min = Math.min(currRes,min);
        }
        return min+cost[i];
    }
    public static int dist(int[] coor,int i,int end) {
        int distSum =0;
        for(int j= i+1; j <end ; j++) {
            distSum += coor[j] - coor[i];
        }
        return distSum;
    }

    public static void solve(char[][] board) {

    }
}


