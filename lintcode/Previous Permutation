http://www.lintcode.com/zh-cn/problem/previous-permutation/

我觉得跟前面一个差不多是吧？dui
反过来？前面是先找小的 这里是找大
步骤都是一样的

[1,3,2,5,4,3]---->swap[1,3,3,5,4,2] dong?--->reverse[1,3,3,4,5,2]<- answer

[1,3,3,4,5,2]  (find decreasing sequence from the end)

1.find i from n-2 to 0, A[i] > A[i+1] break
2.if find a such i, then find j from n-1 to i, A[i] > A[j] break
3.swap(i,j) then reverse from i+1 to n
4.if i=0 means[4,3,2,1]-->reverse from 0 to n.correct lets start


    public boolean isIncreasing(int[] nums) {

        for(int i=0; i < nums.length-1; i++) {
            if(nums[i] > nums[i+1])
                return false;   
        }
        return true;
    }
    
    public ArrayList<Integer> previousPermuation(ArrayList<Integer> numss) {
        int[] nums = new int[numss.size()];
        for(int i=0; i < numss.size(); i++) {
            nums[i] = numss.get(i);
        }
        // write your code here
        if(nums == null || nums.length ==0||nums.length == 1){
            return numss;
        }
        if(isIncreasing(nums)) {
            //step 4
            reverse(0,nums.length-1,nums);
            ArrayList<Integer> res = new ArrayList<Integer>();
            for(int i=0; i < nums.length; i++) {
                res.add(nums[i]);
            }
            return res;
        }
        //here u need to start from n-2 to 0 correct
        
        //find i
        int n=nums.length;
        int i=n-2;
        for(; i >=0; i--) {
            if(nums[i] > nums[i+1])
                break;
        }
        //find j
        int j=n-1;
        for(; j >=i; j--) {
            if(nums[j] < nums[i])
                break;      
        }
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
        reverse(i+1,n-1,nums);
        ArrayList<Integer> ress = new ArrayList<Integer>();
        for(i=0; i < nums.length; i++) {
            ress.add(nums[i]);
        }
        return ress;
    }
    public void reverse(int start,int end,int[] nums) {
        while(start < end) {
            int tmp = nums[start];
            nums[start] = nums[end];
            nums[end] = tmp;
            start++;
            end--;
        }
    }









public ArrayList<Integer> previousPermuation(ArrayList<Integer> nums) {
        // write your code
        ArrayList<Integer> result=new ArrayList<>();
        if(nums == null || nums.size() ==0){
            return result;
        }
        int n=nums.size();
        for(int i=n-2;i>=0;--i){
            if(nums.get(i)>nums.get(i+1)){
                int j=n-1;
                for(;j>i;--j){
                    if(nums.get(i)>nums.get(j)){
                        break;
                    }
                }
                int tmp=nums.get(i);
                nums.set(i,nums.get(j));
                nums.set(j,tmp);
                reverse(nums,i+1,n-1);
                return nums;
            }
        }
        reverse(nums,0,n-1);
        return nums;
    }
    void reverse(ArrayList<Integer> nums,int start,int end){
        while(start<=end){
            int tmp=nums.get(start);
            nums.set(start,nums.get(end));
            nums.set(end,tmp);
            start++;
            end--;
        }
    }
