public class Solution {
    /**
     * @paramn n: An integer
     * @return: A list of root
     */
    public List<TreeNode> generateTrees(int n) {
        // write your code here
        List<TreeNode> output = new ArrayList<TreeNode>();
        if(n==0){
            output.add(null);
            return output;}
        
        output.add(new TreeNode(1));
        
        for(int i = 2; i <= n ;i++){
        List<TreeNode> record = new ArrayList<TreeNode>();
            for(int j =0; j < output.size();j++){
                TreeNode node = clone(output.get(j));
                
                ////1.put the orgin tree to the left of the new node
                TreeNode newnode = new TreeNode(i);
                newnode.left=node;
                record.add(newnode);
                //     2
                //    1
                
                ///2.add the new node to the right tree of the origin tree
                //     1
                //       3(insert 3 into the right of 1 and 2 into left of 3)
                //     2 
                ////////////////////
                //      1
                //        2
                //          3
                //insert 4
                //    1
                //      4
                //     2
                //      3
                /////////////
                //    1 
                //      2
                //        4
                //       3
                
                ////////////
                //    1
                //      2
                //        3
                //          4
                //
                node = output.get(j);
                while(node.right!=null){
                    TreeNode oriright = node.right;
                    TreeNode nn = new TreeNode(i);
                    node.right = nn;
                    
                    
                    nn.left = oriright;
                    TreeNode newnode2 = clone(output.get(j));
                    record.add(newnode2);
                    node.right = oriright;
                    
                    
                    node = node.right;
                }
                TreeNode nn = new TreeNode(i);
                node.right = nn;
                record.add(clone(output.get(j))); 
                node.right = null;
            }
                output=record;
                //record.clear();  ???
                   
            }
            return output;
    }
     private TreeNode clone(TreeNode root){
       if(root == null) return null;
        TreeNode result = new TreeNode(root.val);
        
        result.left = clone(root.left);
        result.right = clone(root.right);
        return result;
    
    }
}















