    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        ArrayList<ArrayList<Integer>> result=new ArrayList<ArrayList<Integer>>();
        if(root == null){
            return result;
          }
        
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        
        q.add(root);
        int currLevel = 1;
        int nextLevel = 0;
        ArrayList<Integer> currList = new ArrayList<Integer>();
        while(!q.isEmpty()) {
            TreeNode curr = q.poll();
            currLevel--;
            currList.add(curr.val);
            
            if(curr.left != null) {
                q.add(curr.left);
                nextLevel++;
            }
            if(curr.right != null) {
                q.add(curr.right);
                nextLevel++;
            }
            
            if(currLevel ==0) {
                result.add(new ArrayList<Integer>(currList));
                currList = new ArrayList<Integer>();
                currLevel = nextLevel;
                nextLevel =0;
            }
            
        }
        ArrayList<ArrayList<Integer>> reverseResult=new ArrayList<ArrayList<Integer>>();
        for(int i=result.size()-1; i >= 0; i--) {
            reverseResult.add(result.get(i));
        }   
        return reverseResult;
    }
