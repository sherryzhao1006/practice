the DP matrix. matrix[i][j] record: using str1 0~i-1  and str1 0~j-1, if they can represent str3 0~i+j-1

public class Solution {
    /**
     * Determine whether s3 is formed by interleaving of s1 and s2.
     * @param s1, s2, s3: As description.
     * @return: true or false.
     */
    public boolean isInterleave(String s1, String s2, String s3) {

        int n= s1.length();
        int m = s2.length();
        int l = s3.length();
        if(n+m != l)
            return false;
        boolean[][] dp = new boolean[n+1][m+1];
        dp[0][0] = true;//emptystring of s1 + emptystring of s2 match emptystring of s3
        for(int i=1; i <= n; i++) {
            int j=0;
            dp[i][j] = dp[i-1][j] && (s1.charAt(i-1) == s3.charAt(i+j-1));
            //if dp[i][j] is true if dp[i-1][j] is true and i-1th(last) char of s1 is the same as (i+j-1)(last) char of s3
                                        || dp[i][j-1] is true and j-1th(last) char of s2 is the same as (i+j-1)(last) char of s3
        }
        for(int j=1; j <= m; j++) {
            int i=0;
            dp[i][j] = dp[i][j-1] && (s2.charAt(j-1) == s3.charAt(i+j-1));
        }
        for(int i=1; i <= n; i++) {
            for(int j=1; j <=m; j++) {
                dp[i][j] =  ( dp[i-1][j] && (s1.charAt(i-1) == s3.charAt(i+j-1)) ) || (dp[i][j-1] && (s2.charAt(j-1) == s3.charAt(i+j-1)));
            }
        }

        return dp[n][m];
    }
}

