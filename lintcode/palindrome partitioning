http://www.jiuzhang.com/solutions/palindrome-partitioning/


abba

所有结果数量？2^(n-1) = ? 16  
a|b|b|a
a|bb|a
a|b|ba
ab|b|a
ab|ba
abb|a
a|bba
abba

     
f(n)= f(n-1) +
        f(n-2)+ ..1
f(n-1) = f(n-2)+f(n-3) +....
f(n) = f(n-1) +f(n-1) = 2*f(n-1)


f(n) = 2*f(n-1) 

f(1) = 1
f(2) = 2*1
f(n) = 2*f(n-1) = 2^2 * f(n-2) = .... =2^(n) f(1)  
     
    //abba
    public static List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<List<String>>();
        cut(0,s,res,new ArrayList<String>());
        return res;
    }
    public static void cut(int start, String s, List<List<String>> res, List<String> currRes){
        if(start == s.length()) {
            res.add(new ArrayList(currRes));
            return;
        }
        for(int i=start; i < s.length(); i++) {
            String currStr = s.substring(start,i+1);
            if(isValid(currStr)) {
                currRes.add(currStr);
                cut(i + 1, s, res, currRes);
                currRes.remove(currRes.size()-1);
            }
        }
    }
    //aba
    //abba
    public static boolean isValid(String s) {
        int left = 0;
        int right = s.length()-1;
        while(left < right) {
            if(s.charAt(left) != s.charAt(right))
                return false;
            left++;
            right--;
        }
        return true;
    }




//Using dp for finding whether substring i to j is palindrom substring






public class Solution {
    public  List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<List<String>>();
        boolean[][] dp = isPalindrome(s);
        cut(0,s,res,new ArrayList<String>(),dp);
        
        return res;
    }
    public  void cut(int start, String s, List<List<String>> res, List<String> currRes,boolean[][] dp){
        if(start == s.length()) {
            res.add(new ArrayList(currRes));
            return;
        }
        for(int i=start; i < s.length(); i++) {
            String currStr = s.substring(start,i+1);
            if(dp[start][i]) {
                currRes.add(currStr);
                cut(i + 1, s, res, currRes,dp);
                currRes.remove(currRes.size()-1);
            }
        }
    }
    
    public boolean[][] isPalindrome(String s) {
        boolean[][] dp= new boolean[s.length()][s.length()];
        for(int i=0; i < s.length(); i++) {
           for(int j=i;j >=0; j--) { 
               if(s.charAt(i) == s.charAt(j) && ((i-j< 2) || dp[j+1][i-1])) {
                    dp[j][i]= true;
                }else{
                    dp[j][i] = false;
                } 
            }
        }
        return dp;        
    }    
}
