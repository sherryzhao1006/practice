//https://dl.dropboxusercontent.com/u/15824957/Lintcode/palindromePartition.png

    public int minCut(String s) {
        if(s.length() == 0 || s.length() ==1){
            return 0;
        }
        int n = s.length();
        int[] dp = new int[n];
        //dp[i] 指 包括0到i需要 几个cut.
        dp[0] = 0;//如果是只有一个字的话不用咔嚓(cut)
        dp[1] = (s.charAt(0) == s.charAt(1)  ? 0 : 1 );//如果0-1是palindrome不用cut
        for(int i=2 ; i < n; i++) {
            if(isP(s.substring(0,i+1))) {
            //是palindrome得话，就不用cut，min-cut=0;
                dp[i] = 0;
                
            } else {
                dp[i] = dp[i-1] +1;
                //c|dd
                //dp[j-1]+1
                //c|d|d
                //dp[i]
                //如果0-i+1不是palin，则从j=1开始，找到palin,记录最小mincut
                for(int j=1; j < i; j++) {
                    if( isP(s.substring(j,i+1))) {
                        dp[i] = Math.min(dp[i], dp[j-1]+1);
                    }
                }
            }
        }
        return dp[n-1];
    }
    public boolean isP(String s) {
        int n=s.length()-1;
        int start=0;
        while(start < n) {
            if(s.charAt(start) != s.charAt(n))
                return false;
            start++;
            n--;
        }
        return true;
    }
