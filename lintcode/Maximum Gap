//http://cgm.cs.mcgill.ca/~godfried/teaching/dm-reading-assignments/Maximum-Gap-Problem.pdf
//http://www.programcreek.com/2014/03/leetcode-maximum-gap-java/
    /*
    Given  a  set  S of n > 2  real numbers   x1, x2, …, xn.
      
     */
    /*
    1 3 2 16  11 5  最大gap是6， 11-5 = 6
    1，2，3，5，11，16 ？ 11-5 ＝6

    n = 6
    min = 1, max = 16
    delta = max-min = 15/5 = 3
    (n-1) buckets
    k=0    1-3   : [1,2,3]
    k=1    4-6   : 5
    k=2    7-9
    k=3    10-12 : 11
    k=4    13-15 :
    ======================
    k=5    16-   : 16
    */


class Bucket {
    int low;
    int high;
    public Bucket() {
        low = -1;
        high = -1;
    }
}
class Solution {
    /**
     * @param nums: an array of integers
     * @return: the maximum difference
     */
    public static int maximumGap(int[] num) {
        int n = num.length;
        int max = num[0];
        int min = num[0];
        //find the maximum(x-max) and the minimum(x-min) in S

        for(int i=1; i < n ;i++) {
            max = Math.max(num[i],max);
            min = Math.min(num[i],min);
        }
        Bucket[] bin = new Bucket[n];
        for(int i=0; i < n; i++) {
            bin[i] = new Bucket();
        }
        //Divide the interval [x-min,x-max] into (n-1) buckets of equal size
        //delta = (x-max - xmin)/(n-1)
        int diff = max-min;
        double delta = (double)diff/(n-1);//n-1 buckets to put n-2 remaining numbers
        //for each of the remaining n-2 numbers determine
        for(int i=0; i < n; i++) {
            int binIndex = (int)((num[i]-min)/delta);
            if(bin[binIndex].low == -1) {
                bin[binIndex].low = num[i];
                bin[binIndex].high = num[i];
            } else {
               bin[binIndex].low = Math.min(num[i],bin[binIndex].low);
                bin[binIndex].high = Math.max(num[i],bin[binIndex].high);
            }
        }
        int result = 0;
        int prev = bin[0].high;
        for(int i=1; i < bin.length; i++) {
            if(bin[i].low != -1) {
                result = Math.max(result, bin[i].low - prev);
                prev = bin[i].high;
            }
        }
        return result;
    }
}
