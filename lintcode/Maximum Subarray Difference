/*
[1, 2, -3, 1] << original array
1: just like stock1, from left to right
record:
[1,3,0,1]

2: from right to left, like step 1, record max
[3,2,-2,1]


3: from left to right , record min
[1,2,-3,-2]

4:from right to left , record min
[0,-1,-3,1]

now pick 1&4

1 : [1,3,0,1]
4 : [0,-1,-3,1]

now 1[0] - 4[3]
    1[1] - 4[2]
    1[2] - 4[1] will be overlapped
    
    1[2] means any subarray from 0 to 2
    4[1] means any subarray from 3 to 1 so there can be overlapped. agree?

    tell me why ti's not right?
it shoul be:these three case
1[0]-4[1]
1[1]-4[2]
1[2]-4[3]
   yep i agree. i like ur idea.
*/


    public int maxDiffSubArrays(ArrayList<Integer> nums) {
    int n = nums.size();
        int[] dp1 = new int[n];
        int[] dp2 = new int[n];
        int[] dp3 = new int[n];
        int[] dp4 = new int[n];
        dp1[0]=nums.get(0);
        dp3[0]=nums.get(0);
        dp2[n-1]=nums.get(n-1);
        dp4[n-1]=nums.get(n-1);
        
        for(int i=1;i<nums.size();i++){
        dp1[i]=Math.max(nums.get(i),dp1[i-1]+nums.get(i));
        dp3[i]=Math.min(nums.get(i),dp3[i-1]+nums.get(i));
        }
        for(int i=nums.size()-2;i>=0;i--){
        dp2[i]=Math.max(nums.get(i),dp2[i+1]+nums.get(i));
        dp4[i]=Math.min(nums.get(i),dp4[i+1]+nums.get(i));
        }
        int output1=Integer.MIN_VALUE;
        int output2=Integer.MIN_VALUE;
        for(int i=0;i<n-1;i++){
            output1=Math.max(output1,Math.abs(dp1[i]-dp4[i+1]));
            output2=Math.max(output2,Math.abs(dp2[i+1]-dp3[i]));
        }
        return Math.max(output1,output2);
    }
