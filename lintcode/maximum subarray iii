public class Solution {
    /**
     * @param nums: A list of integers
     * @param k: An integer denote to find k non-overlapping subarrays
     * @return: An integer denote the sum of max k non-overlapping subarrays
     */
    public static int max = Integer.MIN_VALUE;

    public static int maxSubArray(ArrayList<Integer> nums, int k) {
        if(nums == null || nums.size() == 0)
            return 0;
        if(nums.size() == 1)
            return nums.get(0);
        if(nums.size() < k)
            return 0;
            
            
        int[] arr = new int[nums.size()];
        for(int i=0; i < nums.size(); i++) {
            arr[i] = nums.get(i);
        }
        boolean allNeg = true;
        int currMax = Integer.MIN_VALUE;
        
        for(int i=0; i < arr.length; i++){
            if(arr[i] > 0)
                allNeg = false;
        } 
        
        
        if(!allNeg){

                int[][][] dp = new int[arr.length][k+1][2];
                for(int i=0; i < arr.length; i++) {
                    for(int j=0; j <= k; j++) {
                        for(int kk=0; kk < 2; kk++) {
                            dp[i][j][kk] = -1;
                        }
                    }
                }  
                int res = recursive(arr,0,k,0,dp);
                return res;
            
        } else {
            Collections.sort(nums,Collections.reverseOrder());
            int sum = 0;
            for(int i=0; i < k; i++) {
                sum +=nums.get(i);
            }
            return sum;
        }
    }
    public static int iterative(int[] arr) {
        int[] S = new int[arr.length];
        S[0] = arr[0];
        int res = S[0];
        for(int i=1; i< arr.length; i++) {
            S[i] = Math.max(S[i-1]+arr[i] , arr[i]);
            if(res < S[i]) {
                res = S[i];    
            }
        }
        return res;
    }    
    public static int recursive(int[] arr,int n,int k,int state,int[][][] dp) {
/*
Example : for test case {1,0,-1} , k=3 the above recursive equation pick up the max value which is 1 instead of correct answer {1+0+-1 = 0}. 

The problem we solved before asked for at most k subarrays to be chosen; 
this asks for exactly k subarrays.We can do it using the same techniques. 
We'll just make it so that the "profit" when you end with more than 0 trades still available is - Infinity or whatever.
*/
        if(n == arr.length && k >0)
            return -10000;

        if (n== arr.length)
            return 0;
        if(k==0 && state == 0)
            return 0;
        if(dp[n][k][state] != -1)
            return dp[n][k][state];            
        int max = Integer.MIN_VALUE;
        if(state == 1) {
            //open
            max = Math.max(recursive(arr,n,k,0,dp),recursive(arr,n+1,k,1,dp)+arr[n]);
            /*
            recursive(arr,n,k,0,dp) means close at current n exclusive of current num.
            recursive(arr,n+1,k,1,dp)+arr[n]) means keep it open and take current num in the sum.
            */
        } else {
            max = Math.max(recursive(arr,n+1,k-1,1,dp)+arr[n], recursive(arr,n+1,k,0,dp));
            /*
            recursive(arr,n+1,k-1,1,dp) means open new subarray and include curr number in the new subarray.
            recursive(arr,n+1,k,0,dp) means don't take curr number and don't open new subarray. 
            */
            //close
        }
        dp[n][k][state] = max;

        return max;
    }
}







Runnable Version
=================




import java.util.*;
import java.io.*;



public class Solution {

    public static void main(String[] args) throws FileNotFoundException {
        char[][] board = {
                {'X' , 'X' , 'X' , 'X'},
                {'X' , 'O' , 'O' , 'X'},
                {'X' , 'X' , 'O' , 'X'},
                {'X' , 'O' , 'X' , 'X'}
        };
        solve(board);
        //int[] arr = {1,2,4,2,5,7,2,4,9,0};
        //int[] arr = {1,3,-1,2,-1,2,1,3,-1,2,-1,2,1,3,-1,2,-1,2};
        int[] arr = {1,0,-1};
        System.out.println(maxSubArray(arr));
    }

    public static void solve(char[][] board) {

    }

    public static int max = Integer.MIN_VALUE;
    public static int globalSum = 0;
    public static int maxSubArray(int[] A) {
        int[] S = new int[A.length];
        boolean allNeg = true;
        int currMax = Integer.MIN_VALUE;
        for (int i = 0; i < A.length; i++) {
            if (A[i] > 0)
                allNeg = false;
            if (A[i] > currMax)
                currMax = A[i];
        }
        max = Integer.MIN_VALUE;
        int k=3;
        if (!allNeg) {
            int[][][] dp = new int[A.length][k+1][2];
            for(int i=0; i < A.length; i++) {
                for(int j=0; j <= k; j++) {
                    for(int kk=0; kk < 2; kk++) {
                        dp[i][j][kk] = -1;
                    }
                }
            }
            int res = recursive(A,0,k,0,dp);

            return res;
        } else {
            return currMax;
        }

    }
    //state = 1 means open. state =0 means close
    public static int recursive(int[] arr,int n,int k,int state,int[][][] dp) {
        if(n == arr.length && k >0)
            return -10000;

        if (n== arr.length)
            return 0;
        if(k==0 && state == 0)
            return 0;
        if(dp[n][k][state] != -1)
            return dp[n][k][state];
        int max = Integer.MIN_VALUE;
        if(state == 1) {
            //open
            max = Math.max(recursive(arr,n,k,0,dp),recursive(arr,n+1,k,1,dp)+arr[n]);
        } else {
            max = Math.max(recursive(arr,n+1,k-1,1,dp)+arr[n], recursive(arr,n+1,k,0,dp));
            //close
        }
        dp[n][k][state] = max;
        return max;
    }


}


