public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param value: Remove the node with given value.
     * @return: The root of the binary search tree after removal.
     */
    public TreeNode removeNode(TreeNode root, int value) {
        // write your code here
         if(root == null || (root.left == null && root.right == null && root.val==value))
            return null;
        
        TreeNode dummyNode = new TreeNode(-1);
        dummyNode.left = root;
            
        TreeNode parent = dummyNode;
        TreeNode curr = root;
        TreeNode target = null;
        while(curr != null) {
            if(curr.val < value) {
                parent = curr;
                curr = curr.right;
            }else if(curr.val > value) {
                parent = curr;
                curr = curr.left;
            } else {
                target = curr;
                break;
            }
        }   
        
        if(target == null) {
            return root;
        } 
        //if the target is leaf (yezi) 
        if(target.left == null && target.right == null) {
            if(parent.left != null && parent.left.val== target.val) {
                parent.left = null;    
            } 
            if(parent.right != null && parent.right.val == target.val) 
                parent.right = null;
            }
        
        if(target.left != null) {
            curr = target.left;
            TreeNode prevNode = target;
            //find largest value in the leftsubtree if target.left exists
            while(curr.right != null) {
                prevNode = curr;
                curr = curr.right;
                
            }
           if(curr.left == null) {
           //status = 0 if target is 5
           /*
         10

       /    \

     5         9

   /     \

  2        6
   \
    4
            
   */
           //status =1 if target is 5
           /*
         10

       /    \

     5         9

   /     \

  2        6
 

           */           
               int status = 0;
                   if(prevNode==target){
                    status = 1;
                    }
                    
                    if(parent.left == target ) {
                    parent.left.val = curr.val;                 
                    }else if(parent.right == target ) {
                    parent.right.val = curr.val;                 
                    }
                    
                    if(status ==1){
                        prevNode.left=null;
                    }else{
                        prevNode.right=null;
                    }
                    
           } else {
           //status = 0 if target is 5
           /*
         10

       /    \

     5         9

   /     \

  2        6
 / \
 1  4
    /
   3        
   */
           //status =1 if target is 5
           /*
         10

       /    \

     5         9

   /     \

  2        6
 /
 1
           */
           
               int status = 0;
                   if(prevNode==target){
                    status = 1;
                    }
                    if(parent.left == target ) {
                    parent.left.val = curr.val;                 
                    }
                    if(parent.right == target ) {
                    parent.right.val = curr.val;                 
                    }
                    if(status == 1){
                        prevNode.left=curr.left;
                    }else{
                        prevNode.right=curr.left;
                    }
                    
           }
        }else{
            if(parent.right == target){
            parent.right = target.right;}
            if(parent.left == target){
            parent.left = target.right;}
        }
        return dummyNode.left;
    
    }
}
