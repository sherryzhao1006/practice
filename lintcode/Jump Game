dp:
[2,3,1,1,4]
dp[i]:
i:dp[j]==true && j+A[j]>=A[i]-->dp[i]=true




    public boolean canJump(int[] A) {
        int n = A.length;
        boolean[] dp = new boolean[n];
        dp[0]= true;
        for(int i=0; i < n; i++) {
            for(int j=0; j < i; j++) {
                dp[i] = dp[j] && (j+A[j] >= i);
                if(dp[i] == true)
                    break;
            }
        }
        return dp[n-1];
    }


=========
recursive:

    public boolean canJump(int[] A) {
        int n = A.length;
        return helper(A,0,n);    
    }
    public boolean helper(int[] A, int currIndex,int n) {
        if(currIndex >= n) {
            return false;
        }
        if(currIndex == n-1)
            return true;
        int numSteps = A[currIndex];
        boolean canReach = false;
        while(numSteps > 0) {
            canReach = canReach | helper(A,currIndex+numSteps,n);
            if(canReach == true)
                return true;
            numSteps--;
        }
        return canReach;
    }
