http://yuanhsh.iteye.com/blog/2216972

Given an interval list which are flying and landing time of the flight. How many airplanes are on the sky at most?
Example
For interval list [[1,10],[2,3],[5,8],[4,7]], return 3

Note
If landing and flying happens at the same time, we consider landing should happen at first.

将所有区间的start与end放在一起排序，但是要标记其是属性，然后统一排序，
问题就转化成了括号匹配嵌套的问题了(最大有多少层括号嵌套，比如说((()))就是一个3层嵌套，()(()))最大嵌套是2)，
这里start相当于左括号，end相当于右括号，只要用一个cnt来记录，遇到start就加1，遇到end就减1，记录过程中的最大值就是答案。


[[1,10],[2,3],[5,8],[4,7]]




he is just splitting the interval into left and right points

<1,isLeftPoint> = <1, true>
<10,isLeftPoint> = <10,false>
he spltis the intervals into left and right point. 

can u write the remaining two intervals so that u know the logic


<1,true>
<10,false>
<2,true>
<3,false>
<5,true>
<8,false>
<4,true>
<7,false>

now sort above by numbers
<1,true>
<2,true>
<3,false>
<4,true>
<5,true>
<7,false>
<8,false>
<10,false>

the idea is simple. when u see leftpoint, u increment the count(airplane count)
so that at any point we can find out how many airplane are flying
now we have counter =0
go through the above one by one
<1,true> (leftpoint increment counter =1)
<2,true) (leftpoint increment counter =2)
<3,false) (the first airplane landed so decrement counter =2-1 = 1
<4,true) {the third airplane start cunter = 1+1=2


<5,true) (another airplane fly so incrmeent counter =2+1 = 3
<7,false) (one airplane landed so decrement counter =3-1 = 2
<8,false) etc..

now instead of returning airplanes
u need to return the time that has many airplanes flying
how will u modify it?
 in original code
 it did most = max(most, cnt);  
 now we can change
 if(cnt>most){
 most = cnt; output =p.first
 ｝
 
 
 
 
 
 /**
 * Definition of Interval:
 * public classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */
class Dot {
    int loc;
    boolean isLeft;
    public Dot(int loc, boolean isLeft) {
        this.loc = loc;
        this.isLeft = isLeft;
    }
}
class DotComparator implements Comparator<Dot> {
    public int compare(Dot d1,Dot d2) {
        if(d1.loc != d2.loc)
            return d1.loc - d2.loc;
        if(d1.isLeft == true && d2.isLeft == false)
            return 1;
        else
            return -1;
            
    }
}
class Solution {
    /**
     * @param intervals: An interval array
     * @return: Count of airplanes are in the sky.
     */
    public int countOfAirplanes(List<Interval> airplanes) { 
        List<Dot> dots = new ArrayList<Dot>();
        for(int i=0; i < airplanes.size(); i++) {
            Interval curr = airplanes.get(i);
            dots.add(new Dot(curr.start,true));
            dots.add(new Dot(curr.end,false));
        }
        Collections.sort(dots,new DotComparator());
        int count = 0;
        int max = 0;
        for(int i=0; i < dots.size();i++) {
            if(dots.get(i).isLeft == true){
                count++;
                max = Math.max(count,max);
            } else {
                count--;
            }
        }
        return max;
    }
}
