with O(n) space(hashmap)
================
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null){
            return null;
        }
        if(head == null)
            return null;
        Map<RandomListNode,RandomListNode> hm =new HashMap <RandomListNode,RandomListNode>();
        RandomListNode curr = head;
        RandomListNode dummy = new RandomListNode(-1);
        RandomListNode run = dummy;
        while(curr != null) {
            run.next = new RandomListNode(curr.label);
            run = run.next;
            hm.put(curr,run);
            curr = curr.next;
        }
        curr = head;
        while(curr != null) {
            if(curr.random != null) {
                hm.get(curr).random = hm.get(curr.random);
            }
            curr = curr.next;
        }
        return dummy.next;
    }


with O(1) space (without hashmap)
https://dl.dropboxusercontent.com/u/15824957/Lintcode/Copy%20With%20Random%20Pointer.png
===================================
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null){
            return null;
        }
        copyNext(head);
        copyRandom(head);
        return split(head);
        }
    public void copyNext(RandomListNode head){
        while(head != null){
            RandomListNode node=new RandomListNode(head.label);
            node.next=head.next;
            head.next=node;
            head=head.next.next;
        }
    }
    public void copyRandom(RandomListNode head){
        while(head != null){
            if(head.random!= null){
                head.next.random=head.random.next;
            }
            head=head.next.next;
        }
    }
    public RandomListNode split(RandomListNode head){
        RandomListNode node=head.next;
        while(head != null){
            RandomListNode tmp=head.next;
            head.next=tmp.next;
            if(head.next != null){
                tmp.next=tnp.next.next;
            }
            head=head.next;
        }
        return node;
    }
