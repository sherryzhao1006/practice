//https://dl.dropboxusercontent.com/u/15824957/Lintcode/Divide%20Two%20Integers.png
public class Solution {
    /**
     * @param dividend the dividend
     * @param divisor the divisor
     * @return the result
     */
    public int divide(int dividend, int divisor) {
        //handle special cases
        if(divisor==0) return Integer.MAX_VALUE;
        if(divisor==-1 && dividend == Integer.MIN_VALUE)
            return Integer.MAX_VALUE;
     
        //get positive values
        long pDividend = Math.abs((long)dividend);
        long pDivisor = Math.abs((long)divisor);
     
        int result = 0;
        while(pDividend>=pDivisor){
            //calculate number of left shifts
            int numShift = 0;    
            while(pDividend>=(pDivisor<<numShift)){
                numShift++;
            }
     
            //dividend minus the largest shifted divisor
            //shift to right is because we need to get 倍数 before divisor is less than dividend (that is why numShift-1)
            result += 1<<(numShift-1);
            pDividend -= (pDivisor<<(numShift-1));
        }
     
        if((dividend>0 && divisor>0) || (dividend<0 && divisor<0)){
            return result;
        }else{
            return -result;
        }
    }
}
