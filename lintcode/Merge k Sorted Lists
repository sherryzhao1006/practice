[null,1->null]
 s=0,end=1-->mid=0;
 left=(0,-1) =null
 right=(0,1)  
    stackoverflow so don't use start,m-1
            ListNode left=helper(lists,start,m-1);
            ============
            ListNode left=helper(lists,start,m);
            ListNode right=helper(lists,m+1,end);


    
        public ListNode mergeKLists(List<ListNode> lists) {  
            // write your code here
            if(lists == null || lists.size() == 0)
                return null;
             return helper(lists,0,lists.size()-1);
    }
    public ListNode helper(List<ListNode> lists,int start,int end) {
            //because [] empty listNode array
        if(start > end)
            return null;
        if(start == end)
            return lists.get(start);
        int m = start + (end-start)/2;
        ListNode left=helper(lists,start,m);
        ListNode right=helper(lists,m+1,end);
        return merge(left,right);
    }
    public ListNode merge(ListNode left,ListNode right) {
    
        ListNode dummyNode = new ListNode(-1);
        ListNode run = dummyNode;
        while(left != null && right != null) {
            if(left.val < right.val) {
                dummyNode.next = left;
                left = left.next;
            } else {
                dummyNode.next = right;
                right = right.next;
            }
            dummyNode = dummyNode.next;
        }
        if(left != null) {
            dummyNode.next = left;
        }
        if(right != null) {
            dummyNode.next = right;
        }
        return run.next;
    }
