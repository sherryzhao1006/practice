//http://simpleandstupid.com/2014/12/23/fast-power-lintcode/
class Solution {
    /*
     * @param a, b, n: 32bit integers
     * @return: An integer
     */
     /*
public int fastPower(int a, int b, int n) {
        // write your code here
        long ret = getPower(a, b, n);
        return (int)ret;
    }
    public long getPower(int a, int b, int n){
        if(a == 0) return 0;
        if(n == 0) return 1 % b;
        if(n == 1) return a % b;
         
        long ret = getPower(a, b, n/2);
        ret *= ret;
        ret %= b;
        if(n % 2 == 1){
            ret = ret * (a % b);
        }
        return ret % b;
    }
    */
    //same approach as pow(a,n);
    public int fastPower(int a, int b, int n) {
        if(n >=0) {
            return (int)helper(a,b,n);
        } 
        return (int)(1/helper(a,b,n));
    }

    public long helper(int a,int b,int n) {
        if(a == 0) {
            return 0;
        }
        if(n == 0) {
            return 1%b;
        }
        if(n == 1 || n == -1) {
            return a%b;
        }
        long temp = helper(a,b,n/2);
        long res = (temp*temp)%b;
        if(n%2 != 0) {
            res *= a%b;
        }
        return res%b;
    }

};
