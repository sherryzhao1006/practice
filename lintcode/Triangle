https://dl.dropboxusercontent.com/u/15824957/Lintcode/triangle.png
 int m = triangle.size();
int[][] record = new int[m][m];
for(int i=0;i<m;i++){record[m-1][i]=triangle.get(m-1).get(i);}
for(int i=m-2;i>=0;i--){
      for(int j=0;j<=i;j++){
      record[i][j]=triangle.get(i).get(j)+Math.min(record[i+1][j],record[i+1][j+1]);
      }
}
return record[0][0];


https://dl.dropboxusercontent.com/u/15824957/Lintcode/triangle.png


public class Solution {
    /**
     * @param triangle: a list of lists of integers.
     * @return: An integer, minimum path sum.
     */
    public int minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
        int n = triangle.size();
        int m = triangle.get(n-1).size();
        int[][] dp = new int[n][m];
        for(int i=0; i < m; i++) {
            dp[n-1][i] = triangle.get(n-1).get(i);
        }
        for(int i=n-2; i >=0; i--) {
            for(int j=0; j < triangle.get(i).size(); j++) {
                dp[i][j] = triangle.get(i).get(j) + Math.min(dp[i+1][j],dp[i+1][j+1]);
            }
        }
        return dp[0][0];
    }
}
