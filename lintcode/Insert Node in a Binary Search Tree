//Iterative Version
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param node: insert this node into the binary search tree
     * @return: The root of the new binary search tree.
     */
    public TreeNode insertNode(TreeNode root, TreeNode node) {
        // write your code here
        if(root == null) {
            root = node;
            return root;
        }
        
        TreeNode curr = root;
        TreeNode parent = curr;
        while(curr != null) {
            if(node.val > curr.val) {
                parent = curr;
                curr = curr.right;
            } else if(node.val < curr.val) {
                parent = curr;
                curr = curr.left;
            }
        }
        if(parent.val > node.val) {
            parent.left = node;
        } else {
            parent.right = node;
        }
        return root;
    }
}


Recursive Version :
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param node: insert this node into the binary search tree
     * @return: The root of the new binary search tree.
     */
    public TreeNode insertNode(TreeNode root, TreeNode node) {
        // write your code here
        if(root == null) {
            return node;
        }
        if(root.val > node.val) {
            root.left = insertNode(root.left,node);
        } else  {
            root.right = insertNode(root.right,node);
        }
        return root;
    }
}
