//dp[i][j] means how many steps u need to convert from 0 to i of word1 to 0 to j of word2
public class Solution {
    /**
     * @param word1 & word2: Two string.
     * @return: The minimum number of steps.
     */
     
    public int minDistance(String word1, String word2) {
          if(word1==null || word2 == null)return -1;
        if(word1.length()==0)return word2.length();
        if(word2.length()==0)return word1.length();
        int[][] dp = new int[word1.length()][word2.length()];
        /*
       word1 = "abb"
       word2 = "a"
       i=1, if (dp[0][0] == 0)
                 dp[1][0] = 1;
       i=2 , if (dp[1][0] = 1
                 
       word1 = "b"
       word2 = "a"
       dp[0][0] = 1
       i=1 , if (dp[0][0] == 0)
                   dp[1][0] = 2;
        */      
        dp[0][0] = word1.charAt(0)==word2.charAt(0)? 0:1;
        for(int i=1; i<word1.length();i++){
            if(dp[i-1][0]==i-1 || word1.charAt(i)==word2.charAt(0)){  ///has same character
                dp[i][0]=i;
            }else{
                dp[i][0]=i+1;
            }
        }
        
        for(int i=1; i<word2.length();i++){
            if(dp[0][i-1]==i-1 || word2.charAt(i)==word1.charAt(0)){  ///has same character
                dp[0][i]=i;
            }else{
                dp[0][i]=i+1;
            }
        }
        
        for(int i =1;i<word1.length();i++){
            for(int j=1; j<word2.length() ; j++){
            dp[i][j] = Math.min(dp[i-1][j]+1,dp[i][j-1]+1);
            //a -> ab  第i个of word1多余所以需要一个步骤来delete他故dp[i-1][j]+1
                if(word1.charAt(i)==word2.charAt(j)){
                    dp[i][j] = Math.min(dp[i][j],dp[i-1][j-1]);
                }else{
                    dp[i][j] = Math.min(dp[i][j],dp[i-1][j-1]+1);
                }
            }
        }
        
        return dp[word1.length()-1][word2.length()-1];
    }
}
