/**
 * Definition of Interval:
 * public class Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */


    /**
     * @param intervals: Sorted interval list.
     * @return: A new sorted interval list.
     */
class IntervalComparator implements Comparator<Interval> {
    public int compare(Interval i1, Interval i2) {
        return i1.start - i2.start;
    }
}     
class Solution {
    /**
     * @param intervals: Sorted interval list.
     * @return: A new sorted interval list.
     */
    public List<Interval> merge(List<Interval> intervals) {
        // write your code here
        if(intervals == null || intervals.size() ==0 || intervals.size() == 1)
            return intervals;
        Collections.sort(intervals,new IntervalComparator());
        List<Interval> res = new ArrayList<Interval>();
        int n = intervals.size();
        Interval curr = intervals.get(0);
        for(int i=1; i < n; i++) {

            Interval next = intervals.get(i);
            if(curr.end >= next.start) {
                curr = new Interval(curr.start, Math.max(curr.end,next.end));
            }else {
                res.add(curr);
                curr=next;
            }
        }
                res.add(curr);
        return res;
    }
}
