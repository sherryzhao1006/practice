http://www.lintcode.com/en/problem/next-permutation/
[1,3,2,3]---->[1,3,3,2]
     i j
1.find i from n-2 to 0, A[i]<A[i+1]
2.if find a such i, then find j from n-1 to i, A[i]<A[j]
3.swap(i,j) then reverse from i+1 to n
4.if i=0 means[4,3,2,1]-->reverse from 0 to n.correct lets start


we need to find a increasing sequence from anypoint to the end

example?
[1,3,2,5,4,3]---->swap[1,3,3,5,4,2] dong?--->reverse[1,3,3,4,5,2]<- answer
     i     j               i     j

checking
    public boolean isIncreasing(int[] nums) {

        for(int i=0; i < nums.length-1; i++) {
            if(nums[i] < nums[i+1])
                return false;   
        }
        return true;
    }
    public int[] nextPermutation(int[] nums) {
        // write your code here
        if(nums == null || nums.length ==0||nums.length == 1){
            return nums;
        }
        if(isIncreasing(nums)) {
            //step 4
            reverse(0,nums.length-1,nums);
            return nums;
        }
        //here u need to start from n-2 to 0 correct
        
        //find i
        int n=nums.length;
        int i=n-2;
        for(; i >=0; i--) {
            if(nums[i] < nums[i+1])
                break;
        }
        //find j
        int j=n-1;
        for(; j >=i; j--) {
            if(nums[j] > nums[i])
                break;      
        }
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
        reverse(i+1,n-1,nums);
        return nums;
    }
    public void reverse(int start,int end,int[] nums) {
        while(start < end) {
            int tmp = nums[start];
            nums[start] = nums[end];
            nums[end] = tmp;
            start++;
            end--;
        }
    }
