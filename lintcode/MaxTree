/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
 /*
Max tree:
左右两边取最大，再找最小
要递减
Expression tree:
要递增
左右两边取最小  然后比较左右两边 大的赢



思路就是
for i=1 to n
1.对于每个A[i] 找到这个元素最近的 左右两边的最大值
2.选择这两个值中的比较小的那个元素 这个元素就是他的父亲节点
3.如果是该元素左边的点是父亲节点 则这个元素应该为右儿子
  如果是右边的点是父亲节点 则这个元素为左儿子


[2, 5, 6, 0, 3, 1]

哦哦 不对 是左右两边 临近的 比这个元素大的
2=A[0] = 2  = {null,5}<< 左右两边的最大值 =  find the nearest one so null,5
5=A[1] = {null,6}
6=A[2] = {null,null}
0=A[3] = {6,3} =
3=A[4] = {6,null}
1=A[5] = {3,null}


                6
            5        3
        2          0   1
      
      
stack:2,5 (5>2, 2 pop, 再找比2进入的更早的值 发现没有 所以5的left是2）--》5，6（6>5,5pop, stack为空 6left=5）--》6，0（6>0,则只是push0入stack）-->6,0,3（0<3,pop0,找比0早push进来的还在Stack里面的值 是6，6>3,3left=0)-->6,3,1(你看解答，加入了最后一个值为max_value,max>1,max>3,3right=1,1pop)-->6,3(max>3,max>6,6 right =3,3pop)-->6(max>6,max left =6,6pop)-->max(遍历结束） return max.left  

*/
public class Solution {
    public TreeNode maxTree(int[] A) {
        // write your code here
        if(A == null || A.length == 0){
            return null;
        }
        Stack<TreeNode> stack=new Stack<>();
        for(int i=0;i<=A.length;++i){
            TreeNode right=i==A.length?new TreeNode(Integer.MAX_VALUE):new TreeNode(A[i]);
            while(!stack.empty()){
                if(right.val>stack.peek().val){
                    TreeNode cur=stack.pop();
                    if(stack.isEmpty()){
                        right.left=cur;
                    }
                    else{
                        TreeNode left=stack.peek();
                        if(left.val<right.val){
                            left.right=cur;
                        }
                        else{
                            right.left=cur;
                        }
                    }
                }
                else{
                    break;
                }
            }
            stack.push(right);
        }
        return stack.peek().left;
    }
} 
 
 
 //brute force
 
/* 
public class Solution {
    public  TreeNode maxTree(int[] A) {
        //find max and set it as root
        int rootVal = Integer.MIN_VALUE;
        int rootIndex = 0;
        for (int i = 0; i < A.length; i++) {
            if (A[i] > rootVal) {
                rootVal = A[i];
                rootIndex = i;
            }
        }
        TreeNode root = new TreeNode(A[rootIndex]);
        insert(root, A, 0, rootIndex,A.length-1);
        return root;
    }

    public  void insert(TreeNode root, int[] A, int l, int m, int r) {
        if(m < l || m > r)
            return;
        if(l != m) {
            int leftIndex =0;
            int leftLarge = Integer.MIN_VALUE;
            for (int i = l; i < m; i++) {
                if(A[i] > leftLarge) {
                    leftLarge = A[i];
                    leftIndex = i;
                }
            }
            TreeNode leftNode = new TreeNode(A[leftIndex]);
            root.left = leftNode;
            insert(leftNode,A,l,leftIndex, m-1);
        }
        if(m != r) {
            int rightIndex = 0;
            int rightLarge = Integer.MIN_VALUE;
            for (int i = m + 1; i <= r; i++) {
                if(A[i] > rightLarge) {
                    rightLarge = Math.max(A[i], rightLarge);
                    rightIndex = i;
                }
            }
            TreeNode rightNode = new TreeNode(A[rightIndex]);
            root.right = rightNode;
            insert(rightNode,A,m+1,rightIndex,r);
        }


    }
}
*/
