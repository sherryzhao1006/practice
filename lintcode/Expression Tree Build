http://www.jiuzhang.com/solutions/expression-tree-build/




stack:
+

(2+6*(23+7)/(1+2))



                [+]  
            [2]   \ 
                 [ * ]
                /       \
             [ 6 ]         [ / ]
                        /         \
                    [ + ]        [ + ]
                     /    \       /      \
                   [ 23 ][ 7 ] [ 1 ]   [ 2 ] .


stack:
* 6 - 

(2*6-(23+7)/(1+2))

                 [ - ]
             /          \
        [ * ]              [ / ]
      /     \           /         \
    [ 2 ]  [ 6 ]      [ + ]        [ + ]
                     /    \       /      \
                   [ 23 ][ 7 ] [ 1 ]   [ 2 ] .
                   



public class ExpressionTreeNode {
     public String symbol;
     public ExpressionTreeNode left, right;
     public ExpressionTreeNode(rooting symbol) {
         this.symbol = symbol;
         this.left = this.right = null;
     }
}
 

class TreeNode{
    public int val;
    public String ss;
    public ExpressionTreeNode root;
    public TreeNode(int val,String ss){
        this.val=val;
        this.root=new ExpressionTreeNode(ss);
    }
}               
public class Solution {
    public int getCharacterValue(String str,int base) {
        char currChar = str.charAt(0);
        //same priority 
        if(currChar == '+' || currChar == '-')    
            return 2+base;
        if(currChar == '*' || currChar == '/')
            return 3+base;
        return Integer.MAX_VALUE;
    }    
    public ExpressionTreeNode build(String[] expression) {
        if(expression == null || expression.length ==0){
            return null;
        }
        int base = 0;
        int value = 0;
        Stack<TreeNode> stack=new Stack<TreeNode>();
        for(int i=0; i <= expression.length; i++) {
            if(i != expression.length){
                if(expression[i].equals("(")){
                    base += 10;
                    continue;
                }else if( expression[i].equals(")")) {
                    base -= 10;
                    continue;
                }
                value = getCharacterValue(expression[i],base);
            }

            TreeNode treeValue = (i==expression.length) ? new TreeNode(Integer.MIN_VALUE,"") : new TreeNode(value,expression[i]);
            while(!stack.isEmpty()){
                if(treeValue.val <= stack.peek().val){
                /*
                1+2+3
                stack :+2 
                treeVaue = +(2)
                 curr = 2
                 left = +
                 left.root.right = 2
                stack : +(1) 
                again go into while loop (that is why we need : treeValue.val <= stack.peek().val)
                      +(2)
                 +(1)
                /   \
               1     2                
                */
                    TreeNode cur=stack.pop();
                    if(!stack.isEmpty()){
                        TreeNode left=stack.peek();
                        if(left.val < treeValue.val) {
                            treeValue.root.left = cur.root;
                        }  
                        else{
                            left.root.right=cur.root;
                        }                     
                    }
                    else{

                        treeValue.root.left=cur.root;
                    }
                } else {
                    break;// if treeValue is number break
                }
            }
            stack.push(treeValue);
        }
        return stack.peek().root.left;
    }
}
