public class Solution {
    public boolean canPermutePalindrome(String s) {
        if (s == null || s.length() <= 1) {
            return true;
        }
         
        Map<Character, Integer> map = new HashMap<Character, Integer>();
         
        for (int i = 0; i < s.length(); i++) {
            char letter = s.charAt(i);
             
            if (map.containsKey(letter)) {
                int count = map.get(letter) + 1;
                map.put(letter, count);
            } else {
                map.put(letter, 1);
            }
        }
         
        int tolerance = 0;
        Iterator it = map.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
             
            if ((int) pair.getValue() % 2 != 0) {
                tolerance++;
            }
        }
         
        if (s.length() % 2 == 0) {
            return tolerance == 0;
        } else {
            return tolerance == 1;
        }
    }
}




class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    public ArrayList<ArrayList<Integer>> permuteUnique(ArrayList<Integer> S) {
        ArrayList<ArrayList<Integer>> result=new ArrayList<>();
        if(S == null || S.size() == 0){
            return result;
        }
        int n = S.size();
        ArrayList<Integer> sub=new ArrayList<>();
        boolean[] visited = new boolean[n];
        Collections.sort(S);
        helper(0,n,S,sub,result,visited);
        return result;
    }



    public  void helper(int curr,int n, ArrayList<Integer> S, ArrayList<Integer> sub,ArrayList<ArrayList<Integer>> res,boolean[] visited) {
        if(curr >n)
            return;
        if(sub.size() == n) {
            res.add(new ArrayList<Integer>(sub));
            return;
        }

        for(int i=0; i < n; i++) {

            if (visited[i] == false) {
                if(i > 0 && visited[i-1] == false && i != curr && S.get(i) == S.get(i-1))
                    continue;
                visited[i] = true;
                sub.add(S.get(i));
                helper(i + 1, n, S, sub, res, visited);
                sub.remove(sub.size() - 1);
                visited[i] = false;
            }
        }
    }
}

