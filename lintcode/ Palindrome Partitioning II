//https://dl.dropboxusercontent.com/u/15824957/Lintcode/palindromePartition.png

public int minCut(String s) {

        if(s.length() == 0 || s.length() ==1){
            return 0;
        }
    int n = s.length();
    int[] dp = new int[n];
    dp[0] = 0;
    dp[1] = (s.charAt(0) == s.charAt(1)  ? 0 : 1 );
    for(int i=2 ; i < n; i++) {
        
        if(isP(s.substring(0,i+1))) {
            dp[i] = 0;
            continue;
        }
        dp[i] = dp[i-1] +1;//aa|b
        //cdd
        // a| ispalindrome(a b)
        //j-1|             j|i
        for(int j=1; j < i; j++) {
            if( isP(s.substring(j,i+1))) {
                dp[i] = Math.min(dp[i], dp[j-1]+1);
            }
        }
}
return dp[n-1];
}
public boolean isP(String s) {
    int n=s.length()-1;
    int start=0;
    while(start < n) {
        if(s.charAt(start) != s.charAt(n))
            return false;
        start++;
        n--;
    }
    return true;
}
