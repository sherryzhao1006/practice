Example : 1 2 3 4 5
l = 1, r = 5
m = 1+(5-1)/2 = 1+2 = 3
m is not bad version so search right update l = m+1;
l = 3+1 = 4 , r = 5
m = 4+0 = 4
m is bad version so search left update r = m-1;
while(l <= r) is required.
l=4, r = 4; 
m is 4 and is bad version so search left update r = m-1;
return l;


/**
 * public class VersionControl {
 *     public static boolean isBadVersion(int k);
 * }
 * you can use VersionControl.isBadVersion(k) to judge whether 
 * the kth code version is bad or not.
*/
class Solution {
    /**
     * @param n: An integers.
     * @return: An integer which is the first bad version.
     */
    public int findFirstBadVersion(int n) {
        int l = 1;
        int r = n;
        while(l <= r) {
            int m = l+ (r-l)/2;
            if(VersionControl.isBadVersion(m)) {
                r = m-1;
            } else {
                l = m+1;
            }
        }
        return l;
    }
}
