//https://dl.dropboxusercontent.com/u/15824957/Lintcode/Maximum_Square.png
//https://dl.dropboxusercontent.com/u/15824957/Lintcode/maximal_square2.png

public class Solution {
    /**
     * @param matrix: a matrix of 0 and 1
     * @return: an integer
     */
    public int maxSquare(int[][] matrix) {
         if(matrix.length == 0 || matrix == null){
             return 0;
         }
         int m=matrix.length;
         int n=matrix[0].length;
         int max=0;
         int[][] dp=new int[m][n];
         for(int i=0;i<m;++i){
             dp[i][0]= matrix[i][0];
         }
         for(int j=0;j<n;++j){
             dp[0][j]=matrix[0][j];
         }
         for(int i=1;i<m;++i){
             for(int j=1;j<n;++j){
                 if(matrix[i][j] == 0){
                     dp[i][j]=0;
                 }
                 else{
                     dp[i][j]=Math.min(Math.min(dp[i-1][j-1],dp[i][j-1]),dp[i-1][j])+1;
                 }
             }
        }
        for(int i=0;i<m;++i){
             for(int j=0;j<n;++j){
                 if(max<dp[i][j]){
                     max=dp[i][j];
                 }
             }
        }
         return max*max;
    }
}
