http://www.zhuangjingyang.com/leetcode-jump-game-jump-game-ii/
http://www.lintcode.com/en/problem/jump-game-ii/

跟jump game 一样原理。

dp[i]=到达第i个点需要的step的最小值
dp[i]==Max_value//cannot reach
     !=  Math.min(dp[j]+1,dp[i]);
[1,0,3,1]

    public int jump(int[] A) {
        int n = A.length;
        int[] dp = new int[n];
        for(int i=0; i < n; i++) {
            dp[i] = Integer.MAX_VALUE;    
        }
        dp[0] = 0;
        for(int i=0; i < n; i++) {
            for(int j=0; j < i; j++) {
                if(dp[j]!= Integer.MAX_VALUE && A[j] + j >=i){
                    dp[i] = Math.min(dp[i],dp[j]+1);
                } 
            }
        }
        return dp[n-1] == Integer.MAX_VALUE ? 0 : dp[n-1] ;
        // write your code here
    }





Recursive Solution
====================


    public int jump(int[] A) {
        return helper(A,A.length,0,0,Integer.MAX_VALUE);   
    }
    public static int helper(int[] A, int finalStep,int currPos,int stepCount,int min) {

        if(currPos >= finalStep)
            return min;

        if(currPos == finalStep-1){
            if(stepCount < min)
                min = stepCount;
            return min;
        }
        if(A[currPos] == 0)
            return min;
        for(int i=A[currPos]; i >0 ;i--){
                min = helper(A,finalStep,currPos+i,stepCount+1,min);
        }
        return min;
    } 
