public class Solution {
    /**
     * @param A, B: Two strings.
     * @return: The length of longest common subsequence of A and B.
     */
/*
For "ABCD" and "EDCA", the LCS is "A" (or "D", "C"), return 1.

For "ABCD" and "EACB", the LCS is "AC", return 2.

dp[i][j]: String A i之前和StirngB j以前的相同的字符的最大值
ABCD
i
EACB
j
*/
/*
i=0,j=1
dp[1][2] =1
i=0,j=2 
dp[1][3] = 1
i=0,j=3
dp[1][4] = 1

i=1,j=0;
dp[2][1] = 0
i=1,j=1
dp[2][2] = 0
i=1,j=2
dp[2][3] = math.max(dp[1][3],dp[2,2])=math.max(1,0) = 1
i=1,j=3
dp[2][4] = dp[1][3]+1 = 2 (AB)
*/


    public int longestCommonSubsequence(String A, String B) {
        if(A == null || B == null)
            return 0;
        
        int aLen = A.length();
        int bLen = B.length();
        int[][] dp = new int[aLen+1][bLen+1];
        for(int i=0;i<aLen;++i){
            dp[i][0]=0;
        }
        for(int j=0;j<bLen;++j){
            dp[0][j]=0;
        }
         for(int i= 0; i<aLen; i++) {
             for(int j = 0; j <bLen; j++) {
                 if(A.charAt(i) == B.charAt(j)) {
                     dp[i+1][j+1]=dp[i][j]+1;
                 } else {
                     dp[i+1][j+1]=Math.max(dp[i][j+1], dp[i+1][j]);
                 }
             }
         }
         return dp[aLen][bLen];
    }
}

