public class Solution {
    /**
     * @param A, B: Two strings.
     * @return: The length of longest common subsequence of A and B.
     */
/*
For "ABCD" and "EDCA", the LCS is "A" (or "D", "C"), return 1.

For "ABCD" and "EACB", the LCS is "AC", return 2.

dp[i][j]: String A i之前和StirngB j以前的相同的字符的最大值
ABCD
i
EACB
j
*/
/*
i=0,j=1
dp[1][2] =1
i=0,j=2 
dp[1][3] = 1
i=0,j=3
dp[1][4] = 1

i=1,j=0;
dp[2][1] = 0
i=1,j=1
dp[2][2] = 0
i=1,j=2
dp[2][3] = math.max(dp[1][3],dp[2,2])=math.max(1,0) = 1
i=1,j=3
dp[2][4] = dp[1][3]+1 = 2 (AB)
*/


    public int longestCommonSubsequence(String A, String B) {
        if(A == null || B == null)
            return 0;
        
        int aLen = A.length();
        int bLen = B.length();
        int[][] dp = new int[aLen+1][bLen+1];
        for(int i=0;i<aLen;++i){
            dp[i][0]=0;
        }
        for(int j=0;j<bLen;++j){
            dp[0][j]=0;
        }
         for(int i= 0; i<aLen; i++) {
             for(int j = 0; j <bLen; j++) {
                 if(A.charAt(i) == B.charAt(j)) {
                     dp[i+1][j+1]=dp[i][j]+1;
                 } else {
                     dp[i+1][j+1]=Math.max(dp[i][j+1], dp[i+1][j]);//for common substring we set to zero and take global max
                 }
             }
         }
         return dp[aLen][bLen];
    }
}


Recursive with DP
==================

    public int longestCommonSubsequence(String A, String B) {
            if(A == null || B == null || A.length() == 0 || B.length() == 0){
                return 0;
            }
            int n = A.length();
            int m = B.length();
            int[][] dp = new int[n][m];
            for(int i=0; i < n; i++) {
                for(int j=0; j <m; j++) {
                    dp[i][j] = -1;
                }
            }
            return helper(A,B,A.length(),B.length(),0,0,dp);
    }
    public int helper(String A, String B, int aLen, int bLen, int aPos, int bPos,int[][] dp) {
        if(aPos == aLen || bPos == bLen) {
            return 0;
        }
        if(dp[aPos][bPos] != -1)
            return dp[aPos][bPos];
        int ways = 0;
        if(A.charAt(aPos) == B.charAt(bPos)) {
            ways = 1+helper(A,B,aLen,bLen,aPos+1,bPos+1,dp);
        } else {
            ways = Math.max(helper(A,B,aLen,bLen,aPos+1,bPos,dp),helper(A,B,aLen,bLen,aPos,bPos+1,dp));
        }
        dp[aPos][bPos] = ways;
        return ways;
    }
