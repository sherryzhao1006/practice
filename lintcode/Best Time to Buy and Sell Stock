DP solution:
 /*
    对很难找到买入卖出日期
    比如 1 2 3 4 5
    你只能知道最后卖出
    因为答案是基于前面
    Testcase1
    0 2 1 4
    dp[0] = 0
    dp[1] = 2
    dp[2] = Math.max(1-2, dp[1]+(1-2)) = Math.max(-1,1) = 1
    dp[3] = 4-1+dp[2]  > 4-1 => 4 (buy at index 0 and sell at index 3)
    Testcase2
    0 2 -1 1
    dp[0] = 0
    dp[1] = 2-0+dp[0]  or 2-0 = 2
    dp[2] = -1-2+dp[1] > -1-2 = -1 (buy at index 0 and sell at index 2 > buy at index1 and sell at index2)
    dp[3] = 1-(-1)+dp[2] < 1-(-1) = (buy at index 0 and sell at index 3 < buy at index2 and sell at 3) = 2
    
    
    */
    public int maxProfit(int[] prices) {
        int profit = 0;
        int n = prices.length;
        int[] dp = new int[n];
        for(int i=1; i < n; i++) {
            int diff = prices[i]-prices[i-1];
            if(dp[i-1]+diff < diff) {
                dp[i] = diff;
            } else {
                dp[i] = dp[i-1]+diff;
            }
            profit = Math.max(dp[i],profit);
        }
        return profit;
    }
    
    
Dummy Solution:
    


    public int maxProfit(int[] prices) {
        int profit = 0;
        int min = Integer.MAX_VALUE;
        for(int i=0; i < prices.length ;i++) {
            profit = Math.max(profit, prices[i] -min);
            min = Math.min(prices[i],min);
        }
        return profit;
    }


My solution :
public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length == 0 || prices.length == 1)
            return 0;
        // write your code here
        int max = Integer.MIN_VALUE;
        Stack<Integer> minStack = new Stack<Integer>();
        minStack.push(prices[0]);
        for(int i=1; i < prices.length; i++) {
            int currNum = prices[i];
            if(currNum < minStack.peek())
                minStack.push(prices[i]);
            else {
                max = Math.max(max, prices[i] - minStack.peek());
            }
        }
        return max == Integer.MIN_VALUE ?0 : max;
        
    }
}
