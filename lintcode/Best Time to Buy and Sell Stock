    public int maxProfit(int[] prices) {
        int profit = 0;
        int min = Integer.MAX_VALUE;
        for(int i=0; i < prices.length ;i++) {
            profit = Math.max(profit, prices[i] -min);
            min = Math.min(prices[i],min);
        }
        return profit;
    }



public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length == 0 || prices.length == 1)
            return 0;
        // write your code here
        int max = Integer.MIN_VALUE;
        Stack<Integer> minStack = new Stack<Integer>();
        minStack.push(prices[0]);
        for(int i=1; i < prices.length; i++) {
            int currNum = prices[i];
            if(currNum < minStack.peek())
                minStack.push(prices[i]);
            else {
                max = Math.max(max, prices[i] - minStack.peek());
            }
        }
        return max == Integer.MIN_VALUE ?0 : max;
        
    }
}
