Largest Rectangle in Histogram (Two pointers solution & Container with most water solution)
http://fisherlei.blogspot.com/2012/12/leetcode-largest-rectangle-in-histogram.html
[5,5,1,7,1,1,5,2,7,6]
Output : 10
Expected : 12
The reason is the ans is at [7,6]
since i use container with most water logic so it failed to get to 7,6

Indexes:
left = 0, right = 9
left=1,right=9
left=2
left=3, right = 9
left=4,right=8
so it miss index 8 and 9


public class Solution {
   public int largestRectangleArea(int[] height) {
        int i=0;
        int j=height.length-1;
        int max = 0;
        while(i<=j){
            int ht = height[i];
            for(int k = i+1 ; k <= j ; k++ ){
                ht = Math.min(ht,height[k]);
            }
            int currMax = ht*(j-i+1);
            if(currMax > max)
            max = currMax;
            if(height[i] < height[j])
                i++;
            else
            j--;
        }
        return max;
     }
}

So we need to use bruteforce O(n^2) as listed below :
public class Solution {
   public int largestRectangleArea(int[] height) {
        int n=height.length;
        int max = 0;
        for(int i=0; i < n; i++) {
            int min = Integer.MAX_VALUE;
            for(int j=i; j< n; j++) {
                min = Math.min(min,height[j]);
                int water = min*(j-i+1);
                max = Math.max(water,max);
            }
        }
        return max;
     }
}
 对于每一个height，遍历前面所有的height，求取面积最大值。时间复杂度是O(n*n)
 
 int largestRectangleArea(vector<int> &height) {  
2:      // Start typing your C/C++ solution below  
3:      // DO NOT write int main() function  
4:      //int result[height.size()];  
5:      int maxV = 0;  
6:      for(int i =0; i< height.size(); i++)  
7:      {  
8:        int minV = height[i];  
9:        for(int j =i; j>=0; j--)  
10:        {  
11:          minV = std::min(minV, height[j]);  
12:          int area = minV*(i-j+1);  
13:          if(area > maxV)  
14:            maxV = area;  
15:        }  
16:      }  
17:      return maxV;  
18:    }  
 

Still it's expensive to use O(n^2).

可以过小数据，但是大数据超时。可以理解，这个解法包含了很多重复计算。一个简单的改进，是只对合适的右边界（峰顶），往左遍历面积。

public class Solution {
   public int largestRectangleArea(int[] height) {
        int n=height.length;
        int max = 0;
        int prev = 0;
        for(int i=0; i < n; i++) {
            if(i+1 < n && height[i+1] >= height[i])
                continue;
            
            int j=i;
            int min = Integer.MAX_VALUE;
            while(j >=prev) {
                min = Math.min(height[j],min);
                int water = min*(i-j+1);
                max = Math.max(water,max);
                j--;
            }
            prev = i;
        }
        return max;
     }
}

here i use prev instead of 0. it's wrong and failed the following test case
[3,5,5,2,5,5,6,6,4,4,1,1,2,5,5,6,6,4,1,3]
output : 20 => 5,5,6,6,4 (min=4 * 5 = 20)
expected = 24 => 5,5,6,6,4,4 (min=4*6 = 24) this is better i miss it because i only traverse j to prev instead of 0


corrected solution :
public class Solution {
   public int largestRectangleArea(int[] height) {
        int n=height.length;
        int max = 0;
        for(int i=0; i < n; i++) {
            if(i+1 < n && height[i+1] >= height[i])
                continue;
            
            int j=i;
            int min = Integer.MAX_VALUE;
            while(j >=0) {
                min = Math.min(height[j],min);
                int water = min*(i-j+1);
                max = Math.max(water,max);
                j--;
            }
        }
        return max;
     }
}



Largest Rectangle in Histogram (Stack Solution)

