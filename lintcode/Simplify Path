    public String simplifyPath(String path) {
        
        path = path.trim();
        /*
        There is no need to escape forward slashes. Your code works fine if you just do:
        String[] paths = path.split("/");
        for backward slash you need to escape.
        simplifyPath("c\\d\\");
        */
        String[] strs = path.split("/");
        Stack<String> st = new Stack<String>();
        for(int i=0; i< strs.length; i++) {
            if(strs[i].equals("") || strs[i].equals(".")) {
                continue;
            }            
            if(strs[i].equals("..")) {
                if(!st.isEmpty()) {
                    st.pop();
                }
            } else {
                st.push(strs[i]);
            }
            
        }
        StringBuilder sb = new StringBuilder();
        sb.append("/");
        //string = "///" => string.split("/") => empty string array.        
        if(st.isEmpty()) {
            return sb.toString();
        }
        Stack<String> reverse = new Stack<String>();
    
        while(!st.isEmpty()) {
            reverse.push(st.pop());
        }
        while(!reverse.isEmpty()) {
            sb.append(reverse.pop()).append("/");
        }
        sb.deleteCharAt(sb.length()-1);
        return sb.toString();
    }
    
    
============================================================================== 


public class Solution {
    public static String simplifyPath(String path) {
        if(path == null){
            return path;
        }
        /*
        There is no need to escape forward slashes. Your code works fine if you just do:
        String[] paths = path.split("/");
        for backward slash you need to escape.
        simplifyPath("c\\d\\");
        */
        String[] strings = path.split("/");
        StringBuilder sb = new StringBuilder();
        sb.append("/");
        Stack<String> s = new Stack<String>();
        for(int i=0; i < strings.length; i++) {
            if(strings[i].equals("..")) {
                if(!s.isEmpty()) {
                    s.pop();
                }
            } else if(!(strings[i].equals(".") || strings[i].equals(""))) {
                s.push(strings[i]);
            }
        }
        //string = "///" => string.split("/") => empty string array.
        if(s.isEmpty()){
            return sb.toString();
        }
        Stack<String> reverseStack = new Stack<String>();
        while(!s.isEmpty()) {
            reverseStack.push(s.pop());
        }
        while(!reverseStack.isEmpty()) {
            sb.append(reverseStack.pop()+"/");
        }
        sb.deleteCharAt(sb.length()-1); 
        return sb.toString();
    }
}
