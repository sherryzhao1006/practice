public class Solution {
    /**
     * @param nums: The integer array
     * @return: The length of LIS (longest increasing subsequence)
     */
    /*
       3,4,2,4
             |
             i
         j
             
       dp[0] = 1
       dp[1] = 2 (3->4)
       dp[2] = 1
       dp[3] = size[j]+1 because size[i]=1 < size[j]=2+1 =3 
             = 3 (3,4,4}
    
       if( (num[j] < num[i]) && (sizes[i] < sizes[j]+1)){
               
       
    初始化：dp[i]=1;
    dp[i]:到i为止的LIS的个数
    */
    public int longestIncreasingSubsequence(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        int[] dp = new int[nums.length];
        for(int i=0; i < nums.length;i++) {
            dp[i] = 1;        
        }
        for(int i=0; i < nums.length; i++) {
            for(int j=0; j < i; j++) {
                if(nums[j] <= nums[i] && dp[i] < dp[j]+1) {
                    dp[i] = dp[j]+1;                    
                }
            }
        }
        int max = Integer.MIN_VALUE;
        for(int i=0; i < nums.length; i++) {
            max = Math.max(dp[i],max);
        }
        return max;
    }
}

