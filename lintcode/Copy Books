Copy Books
Brute Force
把所有可能分成k份连续的组合算出来,再求极值

[3,2,4], k = 2.
if the example is [3,1,2] ,k=2
then the insertion problem is to insert k-1=1 board in n-1=2 gap



1)    {3} {1,2} --> outcome=max(3,1+2):3
2)    {3,1} {2} -->outcome=max(3+1,2):4

min(3,4)=3

result-->3

C (k-1) (n-1)

DP
===

{3,2,4} , k= 2


how do you know l=0?


how do we initialize?
dp[1][1]=num[0]=3 dp[1][2]=num[0]+num[1]=5 dp[1][3]=9

//dp[1][1] = this mean 1th person copy 0 to 1 books
//dp[1][2] = this means 1th person copy 0 to 2
//dp[1][3] = this means 1th person copy 0 to 3
 
dp[j][i]=Math.min(Math.max(dp[j-1][l],cost[i]-cost[l]), dp[j][i]);


cost[i]-cost[l] 就是j person copy 的cost
如果j-1 copy 0 to l 的话
j 只能copy l 到 i 的书


then


dp[2][2]=min(max(dp[1][1],2),dp[2][2])=3


dp[2][2]=min(max(dp[1][2],dp[2][2]))=min(3,5)=3

dp[2][3]=min(max(dp[1][1],9),max(dp[1][2],6),max(dp[1][3],4))=5




public class Solution {
    /**
     * @param pages: an array of integers
     * @param k: an integer
     * @return: an integer
     */
    public int copyBooks(int[] pages, int k) {
        // write your code here
        // write your code here
        if(pages==null || pages.length == 0)return 0;
        int[][] record = new int[k][pages.length];
        record[0][0]=pages[0];
        for(int i=1;i<pages.length;i++){
            record[0][i] = pages[i]+record[0][i-1];
        }
        
        for(int j=1; j<k;j++){
            for(int i=0;i<pages.length;i++){
                if(i<j){
                    //因为人数大于书数 所以 肯定跟人数等于书数的结果一样
                    //所以多余的人啥都不干
                    record[j][i]=record[j-1][i];
                }else{
                int copy = 0;
                record[j][i]=Integer.MAX_VALUE;
                    for(int h=i;h>=0;h--){
                    //如果j-1 人 copy 1 to h 的话 jth 人只能copy h 到 i
                    //那么应该是record[j-1][h]+copy
                    //不是呢
                    //他们是同时在copy的
                    //record[j][i] 代表 第jth 个人 copy i books  还是总共j个人copy i books , Ans : 总共
                    //还有就是exactly i books. 还是 upto i books?
                    //是exactly
                    record[j][i]=Math.min(Math.max(record[j-1][h],copy),record[j][i]);
                    copy = copy+pages[h];
                    }
                }
            }
            
        }
        return record[k-1][pages.length-1];
        
    }
}
