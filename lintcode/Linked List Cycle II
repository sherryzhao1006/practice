Linked List Cycle

    public boolean hasCycle(ListNode head) {  
        if(head == null)
            return false;
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next !=null) {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast)
                return true;
        }
        return false;
    }
Linked List Cycle II 

public class Solution {
    /**
     * @param head: The first node of linked list.
     * @return: The node where the cycle begins. 
     *           if there is no cycle, return null
     */
    public ListNode detectCycle(ListNode head) { 
        if(head == null)
            return null;
        ListNode slow = head;
        ListNode fast = head;
        boolean flag= false;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        
            if(slow == fast){
                flag = true;
                break;
            }
        }
        if(flag == false)
            return null;
        slow = head;
        while(slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }
}
