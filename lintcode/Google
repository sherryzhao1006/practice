Google asked to implement BigInteger class
that was first question
and then second ques
was find largest sequence of integers in a set
like {1, 4, 3, 6, 7, 8, 2} would be {1, 2, 3, 4}

class BigInteger {
    
    int[] arr;
    boolean isPositive;
       
    public BigInteger(int num) {
        arr = new int[1];
        arr[0] = num;isPositive = (num >= 0);
    }
    
    public BigInteger add(BigInteger b1,BigInteger b2) 
    {
        if (isZero(b1))
        {
            return b2;
        }
        if (isZero(b2))
        {
            return b1;
        }
        
        if (b1.sign == b2.sign)
        {
            return new BigInteger (addHelper(b1, b2), b1.isPositive);
        }
        
        //different signs
        if (b1.compareMagnitude(b2) < 0)
        {
            return new BigInteger(subtractHelper(b2, b1), false);
        }
        return new BigInteger (subtractHelper(b1, b2), true);         
    }
    
    public boolean isZero(BigInteger b)
    {
        return (arr.length == 0);
    }
    //
    public int compareMagnitude(BigInteger b1, BigInteger b2)
    {
        if (b1.arr.length != b2.arr.length)
        {
            return b1.arr.length - b2.arr.length;
        }
                  
        for (int i=b1.arr.length - 1; i >= 0; i--)
        {
            long digit1 = ((long)b1.arr[i]) & 0xFFFFFFFFL;
            long digit2 = ((long)b2.arr[i]) & 0xFFFFFFFFL;

            if (digit1 > digit2)
            {
                return 1;
                
            } else if (digit1 < digit2)
            {
                return -1;
            }
        }  
        return 0;
    }

        
    public BigInteger subtract(BigInteger b1,BigInteger b2) {
             
    }
    
    public int[] addHelper(int[] b1, int[] b2) 
    {
        long carry = 0;
        result = new int[b1.length + 1];
             
        for (int i=0; i<b1.length; i++)
        {
            long digit1 = ((long)b1.arr[i]) & 0xFFFFFFFFL;
            long digit2 = ((long)b2.arr[i]) & 0xFFFFFFFFL;
            long result = digit1 + digit2 + carry;
            carry = result >> 32;
            result[i] = (int)result;
        }
        
        result[b1.length] = (int) carry;
        return result;
   }
    
    public int[] subtractHelper(BigInteger b1, BigInteger b2) {
    }
}

















result[i] = (int) result;
result = 0001|1111
result[i]  = (int) result = 1111




b1 = 111,110
b2 = 111,111





BigInteger bi = new BigInteger(10);




number / 2^31-1 = index <<
number % 2^31-1 = 



num = 2^60  = how many bits to represent this
/32 = size of array

61/32 = arr[2]

arr[0]  =  
num = num>>32 
arr[1] = 



int[] arr = {110,001,111} = biginteger1
int[] arr = {110,110,100} = biginteger2



1 2 3 4 5 6 7 8 9 10 | 11 12 13 14 15 16 

=====================
