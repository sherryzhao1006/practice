/*
For example, given: start = "hit", end = "cog", and dict = ["hot","dot","dog","lot","log"], return:

output:
  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]

public List<List<String>> findLadders(String start, String end, Set<String> dict) {

}

Map<String,ArrayList<String>> visited = new HashMap<String, ArrayList<String>>();
Map<String, Integer> distances = new HashMap<String, Integer>();

Queue.add(startWord);
visited.add(startWord);
distances.put(startWord, 0);

while(!Queue.isEmpty()) 
{
    String currWord = Queue.poll();
    
    if (currWord.equals(end))
    {
        break;
    }
    
    Integer currDist = distances.get(currWord); 
    String[] res  = getOneEditDistanceWords(currWord);
    for (String s: res)
    {
        if (!visited.containsKey(s))
        {
            Queue.add(s);
            visited.add(s, new ArrayList<String>(currWord));
            distances.add(s, currDist + 1);
        }
        else
        {
            if(currDist + 1 == distances.get(s))
            { 
                visited.get(s).add(currWord);
            }
        }
    }
}


/*
while(visited.get(end)

111
112
121
122
211
*/

V+E

()  (A) (B, F)  (C) (D)
A -> B -> C -> D -> E
 |        ^
 \        |
  ------> F (A)


[A,F,C,D,E] is the shortest path



*/



public List<List<String>> findLadders(String start, String end, Set<String> dict) {

}

Queue.add(startWord);
Map<String,String> visited = new HashMap<String, String>();
visited.add(startWord);

while(!Queue.isEmpty()) 
{
    String currWord = Queue.poll();    
    String[] res  = getOneEditDistanceWords(currWord);
    for (String s: res)
    {
        if (!visited.containsKey(s))
        {
            Queue.add(s);
            visited.add(s, currWord);
        }
    }
}













producer consumer problem bounded buffer
http://www.cs.odu.edu/~cs471w/code/oscj8e-final-src/ch6/semaphores/boundedbuffer/BoundedBuffer.java

use wait and notify (block the execution when the buffer and u want to consume the item)











Google asked to implement BigInteger class
============================================
that was first question
and then second ques
was find largest sequence of integers in a set
like {1, 4, 3, 6, 7, 8, 2} would be {1, 2, 3, 4}

class BigInteger {
    
    int[] arr;
    boolean isPositive;
       
    public BigInteger(int num) {
        arr = new int[1];
        arr[0] = num;isPositive = (num >= 0);
    }
    
    public BigInteger add(BigInteger b1,BigInteger b2) 
    {
        if (isZero(b1))
        {
            return b2;
        }
        if (isZero(b2))
        {
            return b1;
        }
        
        if (b1.sign == b2.sign)
        {
            return new BigInteger (addHelper(b1, b2), b1.isPositive);
        }
        
        //different signs
        if (b1.compareMagnitude(b2) < 0)
        {
            return new BigInteger(subtractHelper(b2, b1), false);
        }
        return new BigInteger (subtractHelper(b1, b2), true);         
    }
    
    public boolean isZero(BigInteger b)
    {
        return (arr.length == 0);
    }
    //
    public int compareMagnitude(BigInteger b1, BigInteger b2)
    {
        if (b1.arr.length != b2.arr.length)
        {
            return b1.arr.length - b2.arr.length;
        }
                  
        for (int i=b1.arr.length - 1; i >= 0; i--)
        {
            long digit1 = ((long)b1.arr[i]) & 0xFFFFFFFFL;
            long digit2 = ((long)b2.arr[i]) & 0xFFFFFFFFL;

            if (digit1 > digit2)
            {
                return 1;
                
            } else if (digit1 < digit2)
            {
                return -1;
            }
        }  
        return 0;
    }

        
    public BigInteger subtract(BigInteger b1,BigInteger b2) {
             
    }
    
    public int[] addHelper(int[] b1, int[] b2) 
    {
        long carry = 0;
        result = new int[b1.length + 1];
             
        for (int i=0; i<b1.length; i++)
        {
            long digit1 = ((long)b1.arr[i]) & 0xFFFFFFFFL;
            long digit2 = ((long)b2.arr[i]) & 0xFFFFFFFFL;
            long result = digit1 + digit2 + carry;
            carry = result >> 32;
            result[i] = (int)result;
        }
        
        result[b1.length] = (int) carry;
        return result;
   }
    
    public int[] subtractHelper(BigInteger b1, BigInteger b2) {
    }
}

















result[i] = (int) result;
result = 0001|1111
result[i]  = (int) result = 1111




b1 = 111,110
b2 = 111,111





BigInteger bi = new BigInteger(10);




number / 2^31-1 = index <<
number % 2^31-1 = 



num = 2^60  = how many bits to represent this
/32 = size of array

61/32 = arr[2]

arr[0]  =  
num = num>>32 
arr[1] = 



int[] arr = {110,001,111} = biginteger1
int[] arr = {110,110,100} = biginteger2



1 2 3 4 5 6 7 8 9 10 | 11 12 13 14 15 16 

=====================
(2) find largest sequence of integers in a set
like {1, 4, 3, 6, 7, 8, 2} would be {1, 2, 3, 4}




like {1, 4, 3, 6, 7, 8, 2} would be {1, 2, 3, 4}


min = 1, max = 8


int[] input = {1, 4, 3, 6, 7, 8, 2};




int[] arr = new int[max-min+1];
for(int i=0; i < input.length; i++) {
    arr[input[i]-min]++;
}

int count = 0;
int max = Integer.MIN_VALUE;
for(int start = 0; start <= (max-min); start++) {
    if(arr[start] == 0)
        count = 0;
    if(arr[start] > 0) {
        count++;
        max = Math.max(max,count);
    } 
}
{0 , 1000]


Map<Integer,Integer> map = new HashMap<Integer,Integer>();
for(int i=0; i < input.length; i++) {
    map.put(input[i],1);
}



2^31-1 +1 =  -(2^31-1)


Nice Solution :


for(int i=0; i < input.length; i++) {
    
    if(map.containsKey(input[i])) {
        
        count = 1;
        int curr = input[i];
        int minPos = curr;
        int maxPos = curr;
        map.remove(curr);        
        
        curr = input[i] - 1;
        while(map.containsKey(curr) && curr != Integer.MAX_VALUE) {
            map.remove(curr);            
            count++;
                      
            curr--;
        }
        minPos = curr+1;
        curr = input[i] +1;
        while(map.containsKey(curr) && curr != Integer.MIN_VALUE) {            
            map.remove(curr);
            count++;                
            curr++;
        }
        maxPos = curr-1;
        
        //max = Math.max(max,count);
        max = Math.max(max,maxPos-minPos+1);
    }
}


1 1000 (waste of lots of space)
