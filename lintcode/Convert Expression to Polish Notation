

http://m.qqapps.sinaapp.com/detail-id-99926.html


(5-6)*7

stack1(operator): *
stack2(number) : 7  6 5 - *
reverse : *-567 




   public ArrayList<String> convertToPN(String[] expression) {
        Stack<String> operator = new Stack<String>();
        Stack<String> number = new Stack<String>();
        ArrayList<String> res = new ArrayList<String>();
        for(int i=expression.length-1; i >=0; i--) {
            String curr = expression[i];
            if(isOperator(curr)){
                while(!operator.isEmpty() && (getPrecedence(operator.peek()) > getPrecedence(curr))){
                    number.push(operator.pop());
                }
                operator.push(curr);
            }else if(curr.equals("(")){
            while(!operator.isEmpty() && !operator.peek().equals(")"))
                   number.push(operator.pop());         
               //remove "("
               operator.pop();  
                
            }else if(curr.equals(")")) {
                 operator.push(curr);
            } else {
                //number
                number.push(curr);
            }
        }
        while(!operator.isEmpty())  {
            number.push(operator.pop());
        }  
        while(!number.isEmpty()) {
            operator.push(number.pop());
        }
        while(!operator.isEmpty()) {
            res.add(operator.pop());
        }
        Collections.reverse(res);
         return res;   
    }
    public boolean isOperator(String operator) {
        if(operator.equals("*")||operator.equals("/")||operator.equals("+")||operator.equals("-")){
            return true;
        }else{
            return false;
        }
    }
    public int getPrecedence(String operator) {
     if(operator.equals("+")||operator.equals("-")){
         return 1;
     }else if(operator.equals("*")||operator.equals("/")){
         return 2;
     }
     return 0;
    }  
