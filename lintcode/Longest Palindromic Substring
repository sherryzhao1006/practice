DP Question
==========
http://www.lintcode.com/en/problem/longest-palindromic-substring/#

    abcdzdcab
  <   |   > 
dp[j][i]=1.char(j)==char(i) 2.dp[j+1][i-1]==true if i-j+1<=3-->true  
public String longestPalindrome(String s) {
        // Write your code here
        if(s.length() == 0 || s == null){
            return "";
        }
        int n=s.length();
        boolean[][]dp=new boolean[n][n];
        int max=0,start=0,end=0;
        for(int i=0;i<n;++i){
            for(int j=0;j<i;++j){
                                                        ///////////////////////
                                                                    //  aba
                                                                    //  j i
                                                                    //   a a
                                                                    //   j i dp[0][1]-->dp[1][0]
                                                                    //  j is from left to right
                                                                    //   i is from right to left
                if(s.charAt(i) == s.charAt(j) && (dp[j+1][i-1]==true || i-j<=2)){
                    dp[j][i]=true;
                }
                if(dp[j][i] && max<(i-j+1)){
                    max=i-j+1;
                    start=j;
                    end = i;
                }
            }
            dp[i][i]=true;
        }
        return s.substring(start,end+1);
    }



O(n^2)
======

    public String longestPalindrome(String s) {
        if(s == null || s.length() == 0){
            return "";
        }
        int n = s.length();
        int max = Integer.MIN_VALUE;
        int start=0,end=0;
        for(int i=0; i < n; i++) {
            int left = i;
            int right = i;
            while(left >=0 && right < n && s.charAt(left) == s.charAt(right)) {
                if(max<right-left+1){
                    max=right-left+1;
                    start=left;
                    end=right;
                }
                //max = Math.max(max,right-left+1);
                left--;
                right++;
            }
            left = i;
            right = i+1; 
            while(left >=0 && right < n && s.charAt(left) == s.charAt(right)) {
                if(max<right-left+1){
                    max=right-left+1;
                    start=left;
                    end=right;
                }
                left--;
                right++;
            }
        } 
        return s.substring(start,end+1);
    }
