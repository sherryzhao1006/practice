public class Solution {

BruteForce is O(n^2) and dp is O(n^2)

    public String longestPalindrome(String s) {
        if(s == null || s.length() ==0 || s.length() == 1)
            return s;
        String max = "";
        for(int i=0; i < s.length()-1; i++) {
            String jiString = getLongest(s,i,i+1);
            String ouString = getLongest(s,i,i);
            if(jiString.length() > max.length()) {
                max = jiString;
                
            } 
            if(ouString.length() > max.length()){
                max = ouString;
            }
        }
        return max;    
    }
    
    //aaaababccccc
    //  |   |
    public String getLongest(String s,int left,int right) {
        while(left >=0 && right < s.length()) {
            if(s.charAt(left) != s.charAt(right)) {
                break;
            }
            left--;
            right++;   
        }
        left++;
        return s.substring(left,right);    
    }
    
DP
========
    
    //dp[i][j]:s 从i->j是否palindrome

    public String longestPalindrome(String s) {
        if(s == null || s.length() ==0 || s.length() == 1)
            return s;
        int n = s.length();
        boolean[][] dp=new boolean[n][n];
        for(int i=0; i < n; i++) {
                dp[i][i] = true;
        }
        int max = 0;
        int start = 0;
        int end = 0;
        for(int i=0; i < n; i++) {
            for(int j=i; j >=0; j--) {
            
            //aba
            //| |
            //j i
            //0 2
            // 1
            
                if(s.charAt(i) == s.charAt(j) && (i-j <2 || dp[j+1][i-1])) {
                    if( (i-j+1) > max ) {
                        max = i-j+1;
                        start = j;
                        end = i;
                    }
                    dp[j][i] = true; 
                }
            }   
        }
        return s.substring(start,end+1);
    }    
}

