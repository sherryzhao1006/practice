//http://www.lintcode.com/en/problem/longest-substring-with-at-most-k-distinct-characters/

    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if(s == null || s.length() == 0) {
            return 0;
        }
        if(k <= 0)
            return 0;
        int prev = 0;
        int max = 0;
        Map<Character,Integer> set = new HashMap<Character,Integer>();
        for(int i = 0; i < s.length() ; i++) {
            if(set.size() == k && !set.containsKey(s.charAt(i))) {
                max = Math.max(max,i-prev);
                while(set.size() == k) {
                    char curr = s.charAt(prev);
                    if(set.get(curr) == 1) {
                        set.remove(curr);
                    } else {
                        set.put(curr,set.get(curr)-1);
                    }                    
                    prev++;
                }
                
            } 
            char curr = s.charAt(i);
            if(set.containsKey(curr)) {
                set.put(curr,set.get(curr)+1);
            } else {
                set.put(curr,1);
            }
        } 
        max = Math.max(max, s.length()-prev);
        return max;                   
    }
