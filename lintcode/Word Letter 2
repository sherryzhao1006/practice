https://github.com/cc2011/practice/blob/master/lintcode/Google
public class Solution {

    public List<List<String>> findLadders(String beginWord, String endWord,Set<String> wordList) {
        String start = beginWord;
        String end = endWord;
        Set<String> dict = wordList;
        ArrayList<List<String>> result=new ArrayList<List<String>>();
        Map<String,ArrayList<String>> visited = new HashMap<String,ArrayList<String>>();
        Map<String,Integer> distances = new HashMap<String,Integer>();
        Queue<String> q = new LinkedList<String>();
        q.add(start);
        if(!visited.containsKey(start)) {
            visited.put(start,new ArrayList<String>());
        }
        dict.add(end);
        distances.put(start, 0);
        while(!q.isEmpty()) {

            String curr=q.poll();
            if(curr.equals(end))
                break;
            int currDist = distances.get(curr);
            char[] currArray = curr.toCharArray();
            for(int i=0;i<curr.length();++i){
                for(char a ='a'; a <='z'; ++a) {
                    char origin = currArray[i];
                    currArray[i] = a;
                    String temp = new String(currArray);
                    if(dict.contains(temp)){
                        if(!visited.containsKey(temp)) {
                            q.add(temp);
                            ArrayList<String> list=new ArrayList<String>();
                            list.add(curr);
                            visited.put(temp,list);
                            distances.put(temp,currDist+1);
                        } else {
                            if(currDist + 1 == distances.get(temp))
                                visited.get(temp).add(curr);
                        }
                    }
                    currArray[i] = origin;
                }
            }

        }
        ArrayList<String> currPath = new ArrayList<String>();
        currPath.add(end);
        getPath(end,start,visited,currPath,result);
        return result;
    }
    public void getPath(String start, String end,Map<String,ArrayList<String>> visited,ArrayList<String> currPath, ArrayList<List<String>> res) {

        if(start.equals(end)) {
            res.add(new ArrayList<String>(currPath));
        }
        if(visited.containsKey(start)) {
            ArrayList<String> currList = visited.get(start);
            for(String curr : currList) {
                currPath.add(0,curr);
                getPath(curr,end,visited,currPath,res);
                currPath.remove(curr);
            }
        }
    }  
}
