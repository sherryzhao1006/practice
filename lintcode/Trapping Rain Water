https://code.stypi.com/diff0zkp
https://code.stypi.com/pp8miewg

http://bangbingsyb.blogspot.com/2014/11/leetcode-trapping-rain-water.html
/*
思路1：stack解法

能积水的地方必然是一个中间低两边高的凹陷。所以寻找的目标是一个递减序列之后的递增。由于积水量只有在递增时才能计算，而计算又可能需要用到递减序列中的多个bar。因此必须将递减序列cache起来。这里使用stack。为了便于面积计算中宽度的计算，stack存放的不是递减序列bar的高度，而是每个bar的坐标
*/
    public int trapRainWater(int[] heights) {
        int n = heights.length;
        Stack<Integer> s = new Stack<Integer>();
        int water = 0;
        for(int i=0; i < n; i++) {
            int base = 0;
            if(!s.isEmpty() && heights[s.peek()] < heights[i]) {
                 base = heights[s.peek()];
                int pop = s.pop();
                while(!s.isEmpty() && heights[s.peek()] <= heights[i]) {
                    //duplicate value can be there that is why <=
                    water += (heights[s.peek()] - base)*(i-s.peek()-1);
                    base = heights[s.pop()];
                }
                //now we need to handle this case 3 1 0 2 (i is pointing to 2(val) and peek is at 3)
                if(!s.isEmpty() && heights[s.peek()] > heights[i]) {
                    water += (heights[i]-base)*(i-s.peek()-1);
                }
            } 
            s.push(i);
        }
        return water;
    }





DP 解


//就是用一个temp记录现在左右两边最大值，然后往中间跑，如果比目前两边的小，那就加上这个值
class Solution {
public:
    int trap(vector<int>& height) {
        int end=height.size()-1;
        int start=0;
        int water=0;
        int temp=0;
        
        while(start<end){
            if(height[start]<height[end]){
                temp=max(temp,height[start]);
               
                water=water+temp-height[start];
                 start++;
            }else{
                temp=max(temp,height[end]);
               
                water=water+temp-height[end];
                 end--;
            }
        }
        return water;
    }
};

Java :



public class Solution {
    /**
     * @param heights: an array of integers
     * @return: a integer
     */

    public int trapRainWater(int[] heights) {
        int n = heights.length;
        int leftMax = Integer.MIN_VALUE;
        int rightMax = Integer.MIN_VALUE;
        int left = 0;
        int right = heights.length-1;
        int water = 0;
        while(left < right) {
            if(heights[left] < heights[right]) {
                if(heights[left] > leftMax) {
                    leftMax = heights[left];
                }
                water += leftMax - heights[left];
                left++;
            } else {
                if(heights[right] > rightMax) {
                    rightMax = heights[right];
                }
                water += rightMax- heights[right];
                right--;
            }
        }
        return water;
    }
}
Test case：
1 4 3 2 0 3
1 4 3 2 0 3 4 3 2 0 3
