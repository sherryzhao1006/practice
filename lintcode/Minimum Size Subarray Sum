public class Solution {
    /**
     * @param nums: an array of integers
     * @param s: an integer
     * @return: an integer representing the minimum size of subarray
     */
/*
那么我们先来看O(n)的解法，我们需要定义两个指针left和right，分别记录子数组的左右的边界位置，然后我们让right向右移，直到子数组和大于等于给定值或者right达到数组末尾，此时我们更新最短距离，并且将left像右移一位，然后再sum中减去移去的值，然后重复上面的步骤，直到right到达末尾，且left到达临界位置，即要么到达边界，要么再往右移动，和就会小于给定值。代码如下：
*/
    /**
     * @param nums: an array of integers
     * @param s: an integer
     * @return: an integer representing the minimum size of subarray
     */
    public int minimumSize(int[] nums, int s) {
        // write your code here
        if(nums.length == 0 || nums == null) return -1;
        int sum = 0;
        int result = Integer.MAX_VALUE;
        int i=0;
        int j=0;
        while(i <= j && j < nums.length) {
            if(sum < s) {
                sum += nums[j];

                j++; 
            }else {
                result = Math.min(result,j-i);
                sum = sum - nums[i];
                i++;
            }
        }
        /* [2,3,1,2,4,3] 
        when we get to i=3 and j=5， the loop exits so we need additional while to get minimum size subarray
        */
        while(i < nums.length && sum >= s) {
                result = Math.min(result,j-i);
                sum = sum-nums[i];
                i++;
        }
        return result == Integer.MAX_VALUE ? -1 : result;
    }

}
