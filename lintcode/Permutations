class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */

    public ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> S) {
        ArrayList<ArrayList<Integer>> result=new ArrayList<>();
        if(S == null || S.size() == 0){
            return result;
        }
        int n = S.size();
        ArrayList<Integer> sub=new ArrayList<>();
        boolean[] visited = new boolean[n];
        Collections.sort(S);
        helper(0,n,S,sub,result,visited);
        return result;
    }



    public void helper(int curr,int n, ArrayList<Integer> S, ArrayList<Integer> sub,ArrayList<ArrayList<Integer>> res,boolean[] visited) {
        if(curr >n)
            return;
        if(sub.size() == n) {
            res.add(new ArrayList<Integer>(sub));
            return;
        }
        for(int i=0; i < n; i++) {
            if (visited[i] == false) {
                visited[i] = true;
                sub.add(S.get(i));
                helper(i + 1, n, S, sub, res, visited);
                sub.remove(sub.size() - 1);
                visited[i] = false;
            }
        }
    }    
}







================================================================================











public List<List<Integer>> permute(int[] num) {
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        if(num==null || num.length==0){
            return result;
        }
        List<Integer> sub=new ArrayList<Integer>();
        help(result,sub,num);
        return result;
    }
    public void help(List<List<Integer>> result,List<Integer> sub,int[] num){
        if(sub.size()==num.length){
            result.add(new ArrayList<Integer>(sub));
            return;
        }
        for(int i=0;i<num.length;++i){
            if(!sub.contains(num[i])){
                sub.add(num[i]);
                help(result,sub,num);
                sub.remove(sub.size()-1);
            }
        }
    }
