/*
(a*b+d)*c

stack1:(sign)     
stack2:(number)   a b * d + c *
*/
public class Solution {
    /**
     * @param expression: A string array
     * @return: The Reverse Polish notation of this expression
     */

   public ArrayList<String> convertToRPN(String[] expression) {
        Stack<String> operator = new Stack<String>();
        Stack<String> number = new Stack<String>();
        ArrayList<String> res = new ArrayList<String>();
        for(int i=0; i < expression.length; i++) {
            String curr = expression[i];
            if(isOperator(curr)){
                while(!operator.isEmpty() && (getPrecedence(operator.peek()) >= getPrecedence(curr))){
                    number.push(operator.pop());
                }
                operator.push(curr);
            }else if(curr.equals("(")){
                operator.push(curr);
            }else if(curr.equals(")")) {
               while(!operator.isEmpty() && !operator.peek().equals("("))
                   number.push(operator.pop());         
               //remove "("
               operator.pop();    
            } else {
                //number
                number.push(curr);
            }
        }
        while(!operator.isEmpty())  {
            number.push(operator.pop());
        }  
        while(!number.isEmpty()) {
            operator.push(number.pop());
        }
        while(!operator.isEmpty()) {
            res.add(operator.pop());
        }
         return res;   
    }
    public boolean isOperator(String operator) {
        if(operator.equals("*")||operator.equals("/")||operator.equals("+")||operator.equals("-")){
            return true;
        }else{
            return false;
        }
    }
    public int getPrecedence(String operator) {
     if(operator.equals("+")||operator.equals("-")){
         return 1;
     }else if(operator.equals("*")||operator.equals("/")){
         return 2;
     }
     return 0;
    }
}
