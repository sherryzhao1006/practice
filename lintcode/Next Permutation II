exactly the same as Next Permutation I.just don't return the "nums"
public class Solution {
    /**
     * @param nums: an array of integers
     * @return: return nothing (void), do not return anything, modify nums in-place instead
     */
    public boolean isIncreasing(int[] nums) {

        for(int i=0; i < nums.length-1; i++) {
            if(nums[i] < nums[i+1])
                return false;   
        }
        return true;
    }
    public void nextPermutation(int[] nums) {
        // write your code here
        if(nums == null || nums.length ==0||nums.length == 1){
            return ;
        }
        if(isIncreasing(nums)) {
            reverse(0,nums.length-1,nums);
            return ;
        }
        //here u need to start from n-2 to 0 correct
        
        //find i
        int n=nums.length;
        int i=n-2;
        for(; i >=0; i--) {
            if(nums[i] < nums[i+1])
                break;
        }
        //find j
        int j=n-1;
        for(; j >=i; j--) {
            if(nums[j] > nums[i])
                break;      
        }
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
        reverse(i+1,n-1,nums);
    }
    public void reverse(int start,int end,int[] nums) {
        while(start < end) {
            int tmp = nums[start];
            nums[start] = nums[end];
            nums[end] = tmp;
            start++;
            end--;
        }
    }
}
