import java.util.*;
import java.io.*;
//http://www.cnblogs.com/lishiblog/p/4187961.html

class pair implements Comparable<pair>{
    private int val;
    private int index;
    public pair(int val, int index) {
        this.val = val;
        this.index = index;
    }
    public int compareTo(pair other) {
        return this.val - other.val;
    }
    public int getIndex(){
        return index;
    }
    public int getValue() {
        return val;
    }
}

public class Solution {
    //arr =     [-3,1, 1 ,-3,5];
    //sum :   [0,-3,-2,-1,-4,1];
    //index :  0, 1, 2, 3, 4,5
    public static void main(String[] args) throws FileNotFoundException {
        //int[] arr = {-3, 1, 1, -3, 5};
        int[] arr = {6,-4,-8,3,1,7};
        System.out.println((subarraySumClosest(arr)).toString());
    }
    public static ArrayList<Integer> subarraySumClosest(int[] nums) {
        ArrayList<Integer> res = new ArrayList<Integer>();
        int n = nums.length;
        pair[] sum = new pair[n+1];
        int sumSoFar = 0;
        sum[0] = new pair(0,-1);
        for(int i=0; i < n; i++) {
            sumSoFar += nums[i];
            sum[i+1] = new pair(sumSoFar,i);
        }
        Arrays.sort(sum);
        int startIndex = 0;
        int endIndex = 0;
        int minStartIndex = 0;
        int minEndIndex = 0;
        int min = Integer.MAX_VALUE;
        for(int i=1; i <= n; i++) {
            startIndex = Math.min(sum[i].getIndex(), sum[i - 1].getIndex())+1;
            endIndex = Math.max(sum[i].getIndex(),sum[i-1].getIndex());
            if(Math.abs(sum[i].getValue()-sum[i-1].getValue()) < min) {
                minStartIndex = startIndex;
                minEndIndex = endIndex;
                min = Math.abs(sum[i].getValue()-sum[i-1].getValue());
            }
        }
        res.add(minStartIndex);
        res.add(minEndIndex);
        return res;
    }
}

