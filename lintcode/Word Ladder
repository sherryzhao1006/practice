/*
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]

As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5. 


"hit" => "a-z"it  =>{}
         h"a-z"it =>{hot}
         hi"a-z" =>{}
         
"hot" =>         
 
*/
    class WordNode {
        String word;
        int count;
        public WordNode(String word,int count) {
            this.word = word;
            this.count = count;
        }
    }
public class Solution {
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return an integer
      */
    public int ladderLength(String start, String end, Set<String> dict) {
        // write your code here
        if(dict.size() == 0 || dict == null){
            return 0;
        }
        Queue<WordNode> q = new LinkedList<WordNode>();
        q.add(new WordNode(start,1));
        while(!q.isEmpty()) {
            WordNode curr = q.poll();
            String currWord = curr.word;
            if(currWord.equals(end))
                return curr.count;
            putOneEdit(q,currWord.length(),currWord,dict,curr.count); 
        }
        return 0;
    }
    public void putOneEdit(Queue<WordNode> q,int n,String curr,Set<String> dict,int count) {
        //a-z
        ArrayList<WordNode> res = new ArrayList<WordNode>();
        for(int i=0; i < curr.length(); i++) {
        StringBuilder sb = new StringBuilder(curr);
        
            for(char a='a';a<='z';++a){
                if(curr.charAt(i) != a) {
                    sb.setCharAt(i,a);
                    if(dict.contains(sb.toString())) {
                        q.add(new WordNode(sb.toString(),count+1));
                        dict.remove(sb.toString());   
                    }              
                }    
            }
        }
    }
}
