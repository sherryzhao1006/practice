//http://www.cnblogs.com/yuzhangcmu/p/4153927.html
//M[i][j]的定义是：从index = i处开始往后所有的differ，并且A[i]的取值取为j
//say index=0 and A[index]=0, you already calculate index=1(M[1][0-100])
//when A[index] =1, you recaulate index=1 (M[1][0-100]);
//when A[index] =2-100, you recalculate index=1(M[1][0-100);

public class Solution {
    /**
     * @param A: An integer array.
     * @param target: An integer.
     */

    public int MinAdjustmentCost(ArrayList<Integer> A, int target) {
        int n = A.size();
        int[][] M = new int[A.size()][101];
        for(int i = 0;i<A.size();i++){
            for(int j = 0;j<=100;j++){
                M[i][j] = Integer.MAX_VALUE;
            }
        }
        return helper(A,new ArrayList<Integer>(A),0,n,target,M);
    }
    public int helper(ArrayList<Integer> A, ArrayList<Integer> B,int index,int n,int target,int[][] M) {
        if(index >=n)
            return 0;
            int min = Integer.MAX_VALUE;
            int diff= 0;
        for(int i=0 ; i <= 100; i++) {
            //当前值是i 不是 A.get(index);
            if(index != 0 && Math.abs(i-B.get(index-1)) > target)
                continue;
            B.set(index,i);
            if(M[index][i]!= Integer.MAX_VALUE){
                diff = M[index][i];
                min = Math.min(diff,min);
            }else{
            diff =Math.abs( i- A.get(index));
            diff += helper(A,B,index+1,n,target,M);
            min = Math.min(diff,min);
            B.set(index,A.get(index)); 
            M[index][i] = diff;   
            }
        
        }
    return min;
    }
}
