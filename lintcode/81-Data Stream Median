http://www.lintcode.com/en/problem/data-stream-median/
import java.util.*;
import java.io.*;

/*
用两个堆, max heap 和 min heap. 维持两个堆的大小相等(max堆可以比min堆多一个).  则max堆的顶即为median值.

so, first we put the first num in maxheap and then the second num come and we compare it to max heap's peek?

if(curr element < maxheap's peek) {
    //what you do?
    put the new element into max heap
} else {
    //what you do?
    put the element into minheap
}

then compare if(max heap.size()>minheap.size()+1)
{
    //we put the largest num in max heap to minheap << i don't get why you do this?? I do this because  维持两个堆的大小相等(max堆可以比min堆多一个)-> we can get the "median"
//got it.

}

if(minheap.size()>maxheap.size()){
    put the peek num in min heap to maxheap// how about this. same thing?to maintain maxpeek is median?
    }
 */


public class Solution {

    public static void main(String[] args) throws FileNotFoundException {
        int[] arr = {4,5,1,3,2,6,0};
        int[] output = medianII(arr);
    }
    public static int[] medianII(int[] nums) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(nums.length);
        PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(nums.length, Collections.reverseOrder());
        int[] output = new int[nums.length];
        for(int i=0; i < nums.length; i++) {
            if(maxHeap.isEmpty()) {
                maxHeap.add(nums[i]);
            } else {
                if(nums[i] < maxHeap.peek()){
                    maxHeap.add(nums[i]);
                } else {
                    minHeap.add(nums[i]);
                }
                if(maxHeap.size() > minHeap.size()+1) {
                    minHeap.add(maxHeap.poll());
                }
                if(minHeap.size() > maxHeap.size()) {
                    maxHeap.add(minHeap.poll());
                }
            }
            output[i] = maxHeap.peek();
        }
        return output;
    }

}

