//http://www.1point3acres.com/bbs/thread-137669-1-1.html
//https://leetcode.com/discuss/58614/java-standard-backtrace-ac-solutoin-short-and-clear
    i)overflow: we use a long type once it is larger than Integer.MAX_VALUE or minimum, we get over it.
    ii)0 sequence: because we can't have numbers with multiple digits started with zero, we have to deal with it too.
    iii)a little trick is that we should save the value that is to be multiplied in the next recursion.
    //subtractAmount


public class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> res = new ArrayList<String>();
        helper(res,"",0,target,num,0,0);
        return res;
    }
    //1+2*3/2 = 1+((2*3)/2)
    //1+2*3/2*3 = 1+(((2*3)/2)*2)
    public void helper(List<String> res, String path, int pos, int target, String num, long sumSoFar, long subtractAmount) {
        if(pos == num.length()){
            if(sumSoFar == target){
                res.add(path);
            }
            return;
        }
        for(int i=pos; i < num.length(); i++) {
            //ii)0 sequence: because we can't have numbers with multiple digits started with zero, we have to deal with it too.
        
            if(i != pos && num.charAt(pos) == '0')
                break;
            long currNum = Long.parseLong(num.substring(pos,i+1));
            //if(i==0)  otherwise you will get "+10-5","*10+5"]
            if(pos ==0){
                helper(res, path+currNum, i+1, target, num,currNum,currNum);
            } else {
                helper(res,path+'+'+currNum,i+1,target,num,sumSoFar+currNum,currNum);
                helper(res,path+'-'+currNum,i+1,target,num,sumSoFar-currNum,-currNum);
                helper(res,path+'*'+currNum,i+1,target,num,sumSoFar-subtractAmount+subtractAmount*currNum,subtractAmount*currNum);
                //if the question asks / add the following code
                //["34/5+62*37*4+9+0","34/5+62*37*4+9-0"] 
                /*
                if(currNum!=0){
                    helper(res,path+'/'+currNum,i+1,target,num,sumSoFar-subtractAmount+subtractAmount/currNum,subtractAmount/currNum);
                }
                */
            }
        }
    }
}
