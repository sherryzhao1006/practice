. Reverse a linked list iteratively 

    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null)
            return head;
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = head;  
        while(curr != null) {
            next = next.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }


. Reverse a linked list recursively 
  1->2->3 ->null        ->4->null      
     |  |
3->2
3->2<->1 
   |   head
  last 
newHead
   
public ListNode reverseList(ListNode head) {
    if(head == null || head.next == null)
        return head;
    ListNode lastNode = head.next;
    ListNode newHead = reverseList(head.next);
    lastNode.next = head;
    head.next = null;
    return newHead; 
}

