    public int maxProfit(int[] prices) {
        if(prices == null || prices.length == 0) {
            return 0;
        }
        int maxProfit = 0;
        for(int i=1; i < prices.length; i++) {
            if(prices[i-1] < prices[i]) {
                maxProfit += prices[i] - prices[i-1];
            }    
        }
        return maxProfit;
    }
stock II leetcode原题。another follow up: what if there are some transition fee for each transition?



public int maxProfit(int[] prices, int[] transFee) {
    if(prices == null || prices.length == 0) {
        return 0;
    }
    int maxProfit = 0;
    for(int i=1; i < prices.length; i++) {
        int buy = prices[i-1]+transFee[i-1];
        int sell = prices[i]-transFee[i-1];
        if(sell > buy) {
            maxProfit += sell-buy;
        }
    }    
    return maxProfit;
}
