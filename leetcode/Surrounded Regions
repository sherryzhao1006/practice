//BFS

    public void solve(char[][] board) {
        if(board == null || board.length == 0)
            return;
        int m = board.length;
        int n = board[0].length;
        for(int i=0; i < n; i++) {
            if(board[0][i] == 'O') {
                dfs(board,0,i,m,n);    
            }
            if(board[m-1][i] == 'O') {
                dfs(board,m-1,i,m,n);
            }
        }
        for(int i=0; i < m; i++) {
            if(board[i][0] == 'O') {
                dfs(board,i,0,m,n);
            }
            if(board[i][n-1] == 'O') {
                dfs(board,i,n-1,m,n);
            }
        }
        for(int i=0; i < m; i++) {
            for(int j=0; j < n; j++) {
                if(board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if(board[i][j] == '#') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    public void dfs(char[][] board,int x, int y, int m, int n) {

        //board[x][y] = '#';
        
        //right,down,left,up
        int[][] dir = {
                        {0,1},
                        {1,0},
                        {0,-1},
                        {-1,0},
                        };
        Queue<Integer> q = new LinkedList<Integer>();
        board[x][y] = '#';
        q.add((x*n+y));
        while(!q.isEmpty()) {
            int curr = q.poll();
            int currX = curr/n;
            int currY = curr%n;
            
            for(int i=0; i < dir.length; i++) {
                int newX = currX+dir[i][0];
                int newY = currY+dir[i][1];
                if(newX < 0 || newX >= m || newY < 0 || newY >=n || board[newX][newY] == 'X' || board[newX][newY] == '#') {
                    continue;
                }
                board[newX][newY] = '#';//tricky. put marker here otherwise time out. putting redudant into queue
                q.add(newX*n+newY);

            }    
        }
        
    }



DFS (Stack Overflow)
====================


//change to DFS
public class Solution {
    public void solve(char[][] board) {
        if(board == null || board.length == 0)
            return;
        int m = board.length;
        int n = board[0].length;
        for(int i=0; i < n; i++) {
            if(board[0][i] == 'O') {
                dfs(board,0,i,m,n);    
            }
            if(board[m-1][i] == 'O') {
                dfs(board,m-1,i,m,n);
            }
        }
        for(int i=0; i < m; i++) {
            if(board[i][0] == 'O') {
                dfs(board,i,0,m,n);
            }
            if(board[i][n-1] == 'O') {
                dfs(board,i,n-1,m,n);
            }
        }
        for(int i=0; i < m; i++) {
            for(int j=0; j < n; j++) {
                if(board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if(board[i][j] == '#') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    public void dfs(char[][] board,int x, int y, int m, int n) {
        if(x < 0 || x >= m || y < 0 || y >=n || board[x][y] == 'X' || board[x][y] == '#') {
            return;
        }
        board[x][y] = '#';
        //right,down,left,up
        int[][] dir = {
                        {0,1},
                        {1,0},
                        {0,-1},
                        {-1,0},
                        };
        for(int i=0; i < dir.length; i++) {
            dfs(board,x+dir[i][0], y+dir[i][1],m,n);
        }
    }
}
