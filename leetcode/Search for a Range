//[5, 7, 7, 8, 8, 10]

start = 0;
end = 5
m = 2;
A[m] = 7  <  target = 8
start = 2+1 = 3
start = 0

start =3 , n = 5;
int m = 4
8 = 8
left = m;
end = m-1; = 3
start = 3, end = 3
m=3, end = 2
left = m;

public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int left = 0;
        int right = nums.length-1;
        int[] res = {-1,-1};
        while(left <= right) {
            int m = left + (right-left)/2;
            if(nums[m] < target) {
                left = m+1;
            } else {
                if(nums[m] == target) {
                    res[0] = m;
                }
                right = m-1;
            }
        }
        if(res[0] == -1)
            return res;
        right = nums.length-1;
        while(left <= right) {
            int m = left + (right-left)/2;
            if(nums[m] <= target) {
                if(nums[m] == target) {
                    res[1] = m;
                }
                left = m+1;
            } else {
                right = m-1;
            }
        }
        return res;
    }
}
