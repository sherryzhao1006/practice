class MinStack {
    private Stack<Integer> stack;
    private Stack<Integer> minStack;
    public MinStack() {
        stack = new Stack<Integer>();
        minStack = new Stack<Integer>();
    }

    public void push(int x) {
        stack.push(x);
        if(!minStack.isEmpty()) {
            if(x < minStack.peek()) {
                minStack.push(minStack.peek());
            } else {
                minStack.push(x);
            }
        } else {
            minStack.push(x);
        }
    }

    public void pop() {
        stack.pop();
        minStack.pop();
    }

    public int top() {
        if(!stack.isEmpty()) {
            return stack.peek();
        }
        return -1;
    }

    public int getMin() {
        if(!minStack.isEmpty()) {
            return minStack.peek();
        }
        return -1;
    }
    public boolean isEmpty() {
        return stack.isEmpty();
    }
}

/*
543123
Queue : 543123

pushStack : 543 <<
popStack : 345
*/
class MyQueue {
    // Push element x to the back of queue.
    private MinStack pushStack;
    private MinStack popStack;
    public MyQueue() {
        pushStack = new MinStack();
        popStack = new MinStack();
    }
    public void push(int x) {
        pushStack.push(x);
    }

    // Removes the element from in front of queue.
    public void pop() {
        if(!empty()) {
            popStack.pop();
        }

    }

    // Get the front element.
    public int peek() {
        if(!empty()) {
            return popStack.top();
        }
        return -1;
    }

    public int getMin() {
        if(!pushStack.isEmpty()) {
            return Math.max(popStack.getMin(),pushStack.getMin());
        }
        return popStack.getMin();
    }

    // Return whether the queue is empty.
    public boolean empty() {
        if(popStack.isEmpty()) {
            while(!pushStack.isEmpty()) {
                popStack.push(pushStack.top());
                pushStack.pop();
            }
        }
        return popStack.isEmpty();
    }
}

public class Solution {

    public int[] maxSlidingWindow(int[] nums, int k) {

        ArrayList<Integer> res = new ArrayList<Integer>();
        if(nums.length ==0 && k ==0)
            return new int[0];
        if( nums.length < k) {
            return new int[0];
        }
        MyQueue q = new MyQueue();
        int i=0;
        for(; i < k; i++) {
            q.push(nums[i]);
        }

        while(i < nums.length) {
            int temp = q.peek();
            res.add(q.getMin());
            q.pop();
            q.push(nums[i]);
            i++;
        }
        if(!q.empty()) {
            int temp = q.peek();
            res.add(q.getMin());
            q.pop();

        }
        int[] resultArray = new int[res.size()];
        for(i=0; i < res.size(); i++) {
            resultArray[i] = res.get(i);
        }
        return resultArray;
    }
}
