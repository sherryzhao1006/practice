http://buttercola.blogspot.com/2015/08/leetcode-paint-house.html
dp[i][j] -- the min cost for house i on painting color j
dp[i][R] = cost[i][R] + Math.min(dp[i - 1][B], dp[i - 1][G]);
dp[i][B] = cost[i][B] + Math.min(dp[i - 1][R], dp[i -1 ][G]);
dp[i][G] = cost[i][G] + Math.min(dp[i - 1][R], dp[i - 1][B]);

Final staus: min(dp[n - 1][R], dp[n - 1][B], dp[n - 1][G]);

public class Solution {
    public int minCost(int[][] costs) {
        if (costs == null || costs.length == 0) {
            return 0;
        }
         
        int[][] dp = new int[costs.length][3];
         
        dp[0][0] = costs[0][0];
        dp[0][1] = costs[0][1];
        dp[0][2] = costs[0][2];
         
        for (int i = 1; i < costs.length; i++) {
            dp[i][0] = costs[i][0] + Math.min(dp[i - 1][1], dp[i - 1][2]);
            dp[i][1] = costs[i][1] + Math.min(dp[i - 1][0], dp[i - 1][2]);
            dp[i][2] = costs[i][2] + Math.min(dp[i - 1][0], dp[i - 1][1]);
        }
         
        return Math.min(dp[costs.length - 1][0], Math.min(dp[costs.length - 1][1], dp[costs.length - 1][2]));
    }
}


time O(n)
space (n*3)  , 3 = color
