/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {  
        if(lists == null ){
            return null;
        }
        return helper(lists,0,lists.length-1);   
    }
    public ListNode helper(ListNode[] lists, int start,int end){
        //because [] empty listNode array
        if(start > end)
            return null;
        if(start == end)
            return lists[start];
        int m = start + (end-start)/2;
        ListNode left = helper(lists,start,m);
        ListNode right= helper(lists,m+1,end);
        return merge(left,right);
    }
    
    //merge
    public ListNode merge(ListNode left,ListNode right) {
        ListNode dummy = new ListNode(-1);
        ListNode run=dummy;
        while(left != null && right != null){
            if(left.val<=right.val){
                run.next=left;
                left=left.next;
            }
            else{
                run.next=right;
                right=right.next;
            }
            run=run.next;
        }
        if(left !=null){
            run.next=left;
        }
        if(right != null){
            run.next=right;
        }
        return dummy.next;
    }    
}
