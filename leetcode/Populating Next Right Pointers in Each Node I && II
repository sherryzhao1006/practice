Populating Next Right Pointers in Each Node I
==============================================
    public void connect(TreeLinkNode root){
        if(root == null){
            return;
        }
        root.next=null;
        Queue<TreeLinkNode> q=new LinkedList<TreeLinkNode>();
        q.add(root);
        while(!q.isEmpty()){
            TreeLinkNode node=q.poll();
            if(node.left != null){
               node.left.next=node.right;
               q.add(node.left);
            }
            if(node.right != null){
             node.right.next=node.next == null?null:node.next.left;
            q.add(node.right);
            }
        }
    }
Populating Next Right Pointers in Each Node II
================================================

public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null){
            return;
        }
        Queue<TreeLinkNode> q = new LinkedList<TreeLinkNode>();
        q.add(root);
        while(!q.isEmpty()) {
            TreeLinkNode prev = null;
            int size=q.size();
            for(int i=0; i < size; i++) {
                TreeLinkNode curr = q.poll(); 
                if(curr.left != null) {
                    q.add(curr.left);
                }           
                if(curr.right != null) {
                    q.add(curr.right);
                }
                if(prev != null) {
                    prev.next = curr;
                }
                prev = curr;
            }
            prev.next = null;
        }           
    }
}




https://siddontang.gitbooks.io/leetcode-solution/content/tree/populating_next_right_pointers_in_each_node.html
https://dl.dropboxusercontent.com/u/15824957/Lintcode/populateNextRightPointer.png

Without using Queue
===================

    public void connect(TreeLinkNode root) {
        if(root == null){
            return;
        }
        TreeLinkNode curr=root;
        TreeLinkNode first = null;
        TreeLinkNode prev = null;
        while(curr != null){
            if(first == null) {
                if(curr.left != null) {
                    first = curr.left;
                } else if(curr.right != null) {
                    first = curr.right;
                }
            }        
            if(curr.left != null) {
                if(prev != null) {
                    prev.next = curr.left;
                }
                prev = curr.left;
            }
            if(curr.right != null) {
                if(prev != null) {
                    prev.next = curr.right;
                }
                prev = curr.right;
            }
            if(curr.next != null) {
                curr = curr.next;
            } else {
                curr = first;
                first = null;
                prev = null;
            }
        }       
    }


