    public static int strStr(String haystack,String needle){
        if(haystack == null || needle == null)
            return -1;
        //if(j == needle.length()), we don't need this if
        /*
        if(haystack.length() == 0 && needle.length() == 0)
            return 0;
        */
        //if(j == needle.length()), we don't need this if
        /*
        if(haystack.length() != 0 && needle.length() == 0)
            return 0;
        */
        //if haystack.length() ==0, return -1; so we don't need this if
        /*
        if(haystack.length() == 0 && needle.length() != 0)
            return -1;
        */
        int i=0, j=0;
        while( i < haystack.length()-needle.length()+1) {
            j=0;
            while( j < needle.length()) {
                if(haystack.charAt(i+j) != needle.charAt(j)) {
                    break;
                } 
                j++;
            }
            if(j == needle.length())
                return i;
            i++;
        }
        return -1;
    }



============================
Better Solution
============================

public class Solution {
    public int strStr(String haystack, String needle) {
        if(haystack == null || needle == null)
            return -1;
        int h=0;
        int n=0;
        //abc  abc
        //  
        while(h <= haystack.length()-needle.length()) {
            n=0;
            while(n < needle.length() && haystack.charAt(h+n) == needle.charAt(n)) {
                n++;
            }
            if(n == needle.length()) 
                return h;        
            h++;   
        } 
        return -1;
    }
}
