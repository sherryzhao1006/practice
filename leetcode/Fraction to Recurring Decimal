public class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        if (numerator == 0)
            return "0";
        if (denominator == 0) {
            if (numerator < 0) {
                return String.valueOf(Integer.MIN_VALUE);
            } else {
                return String.valueOf(Integer.MAX_VALUE);
            }
        }
        StringBuilder sb = new StringBuilder();
        //判断商的正负
        if (numerator > 0 && denominator < 0 || numerator < 0 && denominator > 0) {
            sb.append("-");
        }
        long num = Math.abs((long)numerator);
        //int goes from -2^31(-2147483648) to 2^31-1(2147483647)
        //if denominator is -2^31(-2147483648) inside abs you need to convert to long. otherwise it will go out of max int bound and remain the same.   
        long denom = Math.abs((long)denominator);    
        long divisor = Math.abs((long) (num / denom));
        long remainder = Math.abs((long) (num % denom));
        sb.append(divisor);
        // Given numerator = 2, denominator = 1, return "2".
        if (remainder == 0)
            return sb.toString();
        sb.append(".");
        Map<Long,Integer> map = new HashMap<Long,Integer>();
        map.put(remainder,sb.length());
        while(remainder != 0) {
            remainder *= 10;
            sb.append(remainder/denom);
            remainder = remainder%denom;
            if(map.containsKey(remainder)) {
                int insertOpenParenIndex = map.get(remainder);
                sb.insert(insertOpenParenIndex,"(");
                sb.append(")");
                break;
            } else {
                map.put(remainder, sb.length());
            }
        }
        return sb.toString();
    }
}
