O(n^2) : http://www.1point3acres.com/bbs/thread-142138-1-1.html
======
public class Solution {
class Pair {
        int fir;
        int sec;
        public Pair(int fir, int sec) {
            this.fir = fir;
            this.sec = sec;
        }
    }
   
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums.length < 4) {
            return res;
        }
        HashMap<Integer, List<Pair>> hash = new HashMap<>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length-1; i++) {
            for (int j = i+1; j < nums.length; j++) {
                int sum = nums[i]+nums[j];
                if (!hash.containsKey(sum)) {
                    List<Pair> list = new ArrayList<>();
                    hash.put(sum, list);
                }
                hash.get(sum).add(new Pair(i, j));
            }
        }
        for (int i = 0; i < nums.length-3; i++) {
            if (i != 0 && nums[i] == nums[i-1]) {
                continue;
            }
            for (int j = i+1; j < nums.length-2; j++) {
                if (j != i+1 && nums[j] == nums[j-1]) {
                    continue;
                }
                int target1 = target-nums[i]-nums[j];
                if (!hash.containsKey(target1)) {
                    continue;
                }
                boolean firstAdd = true;
                for (Pair pair: hash.get(target1)) {
                    if (pair.fir <= j) {
                        continue;
                    }
                    //去重复
                    if (firstAdd || nums[pair.fir] != res.get(res.size()-1).get(2)) {
                        firstAdd = false;
                        List<Integer> tmp = new ArrayList<>();
                        tmp.add(nums[i]);
                        tmp.add(nums[j]);
                        tmp.add(nums[pair.fir]);
                        tmp.add(nums[pair.sec]);
                        res.add(tmp);
                    }
                }
            }
        }
        return res;
    }
}



O(n^3)
======
public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        if(nums == null || nums.length ==0)
            return res;
        Arrays.sort(nums);
        int n = nums.length;
        for(int i=0; i < n; i++) {
            if( i > 0 && nums[i] == nums[i-1])
                continue;
            for(int j=i+1; j < n; j++) {
                if(j > i+1 && nums[j] == nums[j-1])
                    continue;
                int left = j+1;
                int right = n-1;
                while(left < right) {
                    int sum = nums[left]+nums[right]+nums[i]+nums[j];
                    if(sum < target) {
                        left++;                        
                    } else if(sum > target) {
                        right--;
                    } else {
                        List<Integer> currRes = new ArrayList<Integer>();
                        currRes.add(nums[i]);
                        currRes.add(nums[j]);
                        currRes.add(nums[left]);
                        currRes.add(nums[right]);
                        res.add(currRes);
                        left++;
                        while(left < right && nums[left] == nums[left-1])
                            left++;
                        right--;
                        while(left < right && nums[right] == nums[right+1])
                        right--;
                    }
                    
                }
            }
        }  
        return res; 
    }
}
