With HashMap Version
====================

    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null) {
            return head;
        }        
        Map<RandomListNode,RandomListNode> map = new HashMap<RandomListNode,RandomListNode>();
        RandomListNode curr = head;
        while(curr != null) {
            RandomListNode newNode = new RandomListNode(curr.label);
            map.put(curr,newNode);            
            curr = curr.next;
        }
        curr = head;
        while(curr != null) {
            RandomListNode currNode = map.get(curr);
            if(curr.next != null) {
                if(map.containsKey(curr.next)) {
                    currNode.next = map.get(curr.next);
                }
            }
            if(curr.random != null) {
                if(map.containsKey(curr.random)) {
                    currNode.random = map.get(curr.random);
                }
            }
            curr = curr.next;
        }
        return map.get(head);
    }
    
Without HashMap O(1) space https://dl.dropboxusercontent.com/u/15824957/Lintcode/Copy%20With%20Random%20Pointer.png
===========================
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null) {
            return head;
        }        
        copyNext(head);
        copyRandom(head);
        return split(head);
    }
    public void copyNext(RandomListNode head) {
        while(head != null) {
            RandomListNode newNode = new RandomListNode(head.label);
            newNode.next = head.next;
            head.next = newNode;
            head= head.next.next;
        }
    }
    public void copyRandom(RandomListNode head) {
        while(head != null) {
            if(head.random == null) {
                head.next.random = null;
            } else {
                head.next.random = head.random.next;                
            }
            head = head.next.next;
        }    
    }
    public static RandomListNode split(RandomListNode head) {
        RandomListNode newHead = head.next;
        RandomListNode newCurr = newHead;
        RandomListNode curr = head;
        while(curr != null) {
            curr.next = newCurr.next;
            if(newCurr.next != null) {
                newCurr.next = newCurr.next.next;
                newCurr = newCurr.next;
            }
            curr = curr.next;
        }
        return newHead;
    }
    
Without HashMap Version
=======================
