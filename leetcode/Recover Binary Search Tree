/*
O(n) 空间的解法是，开一个指针数组，中序遍历，将节点指针依次存放到数组里，然后寻找两
处逆向的位置，先从前往后找第一个逆序的位置，然后从后往前找第二个逆序的位置，交换这两个
指针的值。
*/
/*
O(log n) 空间的解法如下：
用递归中序遍历，中序遍历的特点是元素访问是按照从小到大被访问的，如果碰到一个逆序的，
则这个逆序的两个点有一个肯定是错了的，那么到底是哪个呢？
从中序遍历的特点可知，第一个错误的节点肯定是逆序对中的较大的，第二个则是逆序对中较小的
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private TreeNode prev = null, first = null, second = null;
    public void recoverTree(TreeNode root) {
        if(root == null) {
            return;
        }
        inorder(root);
        int temp = first.val;
        first.val = second.val;
        second.val = temp;
    }
    public void inorder(TreeNode root) {
        if(root.left != null) {
            inorder(root.left);
        }
        if(prev == null) {
            prev = root;
        } else {
            if(root.val < prev.val) {
                if(first == null) {
                    first =prev;    
                }
                second = root;
            }
        }
        prev = root;
        if(root.right != null) {
            inorder(root.right);
        }
    }
}
