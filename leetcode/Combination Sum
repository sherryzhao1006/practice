    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(candidates == null || candidates.length ==0)
            return res;
        Arrays.sort(candidates);
        if(candidates == null || candidates.length == 0)
            return res;
        helper(res,new ArrayList<Integer>(),0,target,0,candidates);
        return res;
    }
    public void helper(List<List<Integer>> res, List<Integer> currRes, int index, int target, int sumSoFar,int[] candidates) {
        if(sumSoFar > target) {
            return;
        }
        if(sumSoFar == target) {
            res.add(new ArrayList<Integer>(currRes));
        } else {
            for(int i=index; i < candidates.length; i++) {
                currRes.add(candidates[i]);
                helper(res,currRes,i,target,sumSoFar+candidates[i],candidates);
                currRes.remove(currRes.size()-1);
            }
        }
    }
