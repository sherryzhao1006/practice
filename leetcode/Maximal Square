//https://dl.dropboxusercontent.com/u/15824957/Lintcode/Maximum_Square.png
//https://dl.dropboxusercontent.com/u/15824957/Lintcode/maximal_square2.png
public class Solution {
    public int maximalSquare(char[][] matrix) {
            if(matrix == null || matrix.length == 0 || matrix[0].length ==0){
                return 0;
            }
            int n=matrix.length;
            int m=matrix[0].length;
            int[][] dp=new int[n][m];
            int max=0;
            for(int i=0;i< n; i++) {
                if(matrix[i][0] == '0')
                    dp[i][0] = 0;
                else
                    dp[i][0] = 1;  
            }
            for(int j=0; j < m; j++) {
                if(matrix[0][j] == '0')
                    dp[0][j] = 0;
                else
                    dp[0][j] = 1;
            }

            for(int i=1; i < n; i++) {
                
                for(int j=1; j < m; j++) {
                    if(matrix[i][j] == '0')
                        dp[i][j] =0;
                    else{
                        int min = Integer.MAX_VALUE;
                        min = Math.min(min,dp[i-1][j-1]);
                        min = Math.min(min,Math.min(dp[i-1][j],dp[i][j-1]));
                        dp[i][j] = min+1;  
                    }
                }
            }
            for(int i=0;i<n;++i){
                for(int j=0;j<m;++j){
                    max=Math.max(max,dp[i][j]);
                   }
            }
            return max*max;

    }
}
