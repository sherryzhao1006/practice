https://dl.dropboxusercontent.com/u/15824957/Lintcode/BST%20Iterator.png
https://dl.dropboxusercontent.com/u/15824957/BinaryTreeIterator.mov
public class BSTIterator {
    private TreeNode curr = null;
    private Stack<TreeNode> s = null;
    public BSTIterator(TreeNode root) {
        curr = root;
        s = new Stack<TreeNode>();    
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return (!s.isEmpty() || curr != null);    
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode returnVal = null;
        //if(s.isEmpty()) {//<< this is wrong
        if(curr != null) {
            
            while(curr.left != null) {
                s.push(curr);
                curr = curr.left;
            }
            returnVal = curr;
            curr = curr.right;
        } else {
            returnVal = s.pop();
            curr = returnVal.right;
        }        
        return returnVal.val;    
    }
}
    
}
