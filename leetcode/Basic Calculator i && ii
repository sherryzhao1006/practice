modification of http://www.lintcode.com/en/problem/expression-evaluation/#

just input format is different

public class Solution {
    /**
     * @param expression: an array of strings;
     * @return: an integer
     */
    public int calculate(String s) {
        return evaluateExpression(s);            
    } 
    public int evaluateExpression(String s) {
        // write your code here
        if(s == null || s.length() ==0)return 0;
        ArrayList<String> expressionrpn = convertToRPN(s);
       return  evalRPN(expressionrpn);
        
    }    
    public ArrayList<String> convertToRPN(String expression) {
        Stack<String> operator = new Stack<String>();
        Stack<String> number = new Stack<String>();
        ArrayList<String> res = new ArrayList<String>();
        for(int i=0; i < expression.length(); i++) {
            char curr = expression.charAt(i);
            if(curr == ' ')
                continue;
            if(isOperator(curr+"")){                       
                while(!operator.isEmpty() && (getPrecedence(operator.peek()) >= getPrecedence(curr+""))){
                    number.push(operator.pop());
                }
                operator.push(curr+"");
            }else if(curr =='('){
                operator.push(curr+"");
            }else if(curr == ')') {
               while(!operator.isEmpty() && !operator.peek().equals("("))
                   number.push(operator.pop());         
               //remove "("
               operator.pop();    
            } else {
                //number
                //123+
                //|  |
                //i  j
                int j = i+1;
                StringBuilder sb = new StringBuilder();
                sb.append(curr);
                while(j < expression.length() && Character.isDigit(expression.charAt(j))) {
                    sb.append(expression.charAt(j));
                    j++;                    
                }
                number.push(sb.toString());
                i=j-1;
            }
        }
        while(!operator.isEmpty())  {
            number.push(operator.pop());
        }  
        while(!number.isEmpty()) {
            operator.push(number.pop());
        }
        while(!operator.isEmpty()) {
            res.add(operator.pop());
        }
         return res;   
    }
    public boolean isOperator(String operator) {
        if(operator.equals("*")||operator.equals("/")||operator.equals("+")||operator.equals("-")){
            return true;
        }else{
            return false;
        }
    }
    public int getPrecedence(String operator) {
     if(operator.equals("+")||operator.equals("-")){
         return 1;
     }else if(operator.equals("*")||operator.equals("/")){
         return 2;
     }
     return 0;
    }
    
     public int evalRPN(ArrayList<String> tokens) {
        // Write your code here
        
        Stack<Integer> record = new Stack<Integer>();
        
        for(int i =0 ;i < tokens.size();i++){
            if(!isOperator(tokens.get(i))){
                record.push(Integer.parseInt(tokens.get(i)));    
            }else{
                int b = record.pop();
                int a = record.pop();
                if(tokens.get(i).equals("+")) {
                 record.push(a+b);
                }else if(tokens.get(i).equals("-")) {
                    record.push(a-b);
                }
                else if(tokens.get(i).equals("/")) {
                    record.push(a/b);
                }
                else if(tokens.get(i).equals("*")) {
                    record.push(a*b);
                }
            } 
        } 
        /*
        ["(","(","(","(","(",")",")",")",")",")"]
        if stack is empty return 0;
        */
        if(!record.isEmpty()){
        return record.pop();   
            
        }  else {
            return 0;
        }     
    }
}
