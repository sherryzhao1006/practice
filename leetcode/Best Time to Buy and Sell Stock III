//[4,4,6,1,1,4,2,5], return 6.

public class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length == 0)
            return 0;
        int min = prices[0];
        int n = prices.length;
        int[] left = new int[n];
        int[] right = new int[n];
        for(int i=1; i < n; i++) {
            if(min > prices[i]) {
                min = prices[i];
            }
            /*
            [2,1,2,0,1] 
                   |
                   that is why we need left[i-1]
            */
            left[i] = Math.max(left[i-1],prices[i]-min);
        }
        int max = prices[n-1];
        for(int i=n-2; i >=0; i--) {
            if(max < prices[i]) {
                max = prices[i];
            }
            right[i] = Math.max(right[i+1],max-prices[i]); 
        }
        int globalMax = 0;
        for(int i=0;i < n; i++) {
            globalMax = Math.max(globalMax,left[i]+right[i]);
        }
        return globalMax;
    }
}
