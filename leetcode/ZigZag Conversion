    public String convert(String s, int nRows) {
        if(nRows <=1)
            return s;
        StringBuilder[] list = new StringBuilder[nRows];
        for(int i=0; i < nRows; i++){
            list[i] = new StringBuilder();
        }
        int charCount =0;
        boolean down = true;
        int currRow = 0;
        while(charCount < s.length()) {
            list[currRow].append(s.charAt(charCount));
            if (currRow == 0)
                down = true;
            if (currRow == nRows-1)
                down = false;
            if (down)
                currRow++;
            else
                currRow--;
            charCount++;
        }
        StringBuilder res = new StringBuilder();
        for(StringBuilder sb : list)
            res.append(sb.toString());
        return res.toString();
    }
    
    
    
    =============





public class Solution {
    public String convert(String s, int numRows) {
        if(s == null || s.length() == 0){
            return "";
        }
        if(numRows == 1 || numRows == s.length()){
            return s;
        }    
        StringBuilder[] list = new StringBuilder[numRows];
        for(int i=0; i < list.length; i++) {
            list[i] = new StringBuilder();
        }
        boolean down = true;
        int cnt = 0;
        for(int i=0; i < s.length(); i++) {
            if(cnt == -1) {
                down = true;
                cnt = cnt + 2;
            } else if(cnt == numRows) {
                down = false;
                cnt = numRows-2;
            }
    
            list[cnt].append(s.charAt(i));
    
    
            if(down == true) {
                cnt++;
            } else {
                cnt--;
            }
        }  
        StringBuilder res = new StringBuilder();    
        for(int i=0; i < list.length; i++) {
            res.append(list[i].toString());
        }                  
        return res.toString();
    }
}
