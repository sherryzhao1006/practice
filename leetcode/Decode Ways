//https://dl.dropboxusercontent.com/u/15824957/Lintcode/DecodeWays.png
DP
====
public class Solution {
    /*
2626
2|6|2|6
2|6|26
26|2|6
26|26

1｜2 3 1 2 3 dp[i+1]  ( i 是指向 1， i+1是指1后面有多少种decode ways。所以根1没关系
12｜ 3 dp[i+2]   ( i 是指向 1， i+2是指2后面有多少种decode ways。所以根1没关系
=============
12
dp[2]=1,dp[1]=1,dp[0] = “12” + “1|2”
======
100
dp[3]=1, dp[2]=0,dp[1]=0,dp[0]=dp[1]+dp[2]=0
==========================================
*/

Recursive and Memoization
==========================================
    public int numDecodings(String s) {
        if(s == null || s.length() ==0)
            return 0;
        int[] dp = new int[s.length()];
        for(int i=0; i < s.length(); i++) {
            dp[i] = -1;
        }
        //return helper(s,dp);
        return helper2(s,dp,0);
    }
    //recursive and memoization 

    public int helper2(String s, int[] dp,int pos) {
        int sLen = s.length();
        //found the match
        if(sLen == pos)
            return 1;
        //base case invalid if it starts with 0
        if(s.charAt(pos) == '0')
            return 0;
        if(dp[pos] != -1)
            return dp[pos];
        int ways = 0;

        //handle one digit
        ways += helper2(s,dp,pos+1);
        if(pos < sLen-1) {
            int currTwoDigitNumber = Integer.parseInt(s.substring(pos,pos+2));
            if(currTwoDigitNumber <= 26)
                ways +=helper2(s,dp,pos+2);
        }
        dp[pos] =ways;
        return ways;
    }

Bottom-Up Approach
==========================================
    public int numDecodings(String s) {
        /* if char i is singel one ,it has i+1 ways
        if char i and i+<=26 means it can combine, it has i+1 + i+2 ways*/
        int n=s.length();
        if(n==0) return 0;
        int[] dp=new int[n+1];
        dp[n]=1;
        dp[n-1]=s.charAt(n-1)=='0'?0:1;
        for (int i = n - 2; i >= 0; i--){
            if (s.charAt(i) == '0') continue;
            else dp[i] = (Integer.parseInt(s.substring(i,i+2))<=26) ? dp[i+1]+dp[i+2] : dp[i+1];
        }
        return dp[0];
    }

