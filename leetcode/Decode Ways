//https://dl.dropboxusercontent.com/u/15824957/Lintcode/DecodeWays.png
DP
====
public class Solution {
    /*
2626
2|6|2|6
2|6|26
26|2|6
26|26

1｜2 3 1 2 3 dp[i+1]  ( i 是指向 1， i+1是指1后面有多少种decode ways。所以根1没关系
12｜ 3 dp[i+2]   ( i 是指向 1， i+2是指2后面有多少种decode ways。所以根1没关系
=============
12
dp[2]=1,dp[1]=1,dp[0] = “12” + “1|2”
======
100
dp[3]=1, dp[2]=0,dp[1]=0,dp[0]=dp[1]+dp[2]=0
==========================================
*/
    public int numDecodings(String s) {
        /* if char i is singel one ,it has i+1 ways
        if char i and i+<=26 means it can combine, it has i+1 + i+2 ways*/
        int n=s.length();
        if(n==0) return 0;
        int[] dp=new int[n+1];
        dp[n]=1;
        dp[n-1]=s.charAt(n-1)=='0'?0:1;
        for (int i = n - 2; i >= 0; i--){
            if (s.charAt(i) == '0') continue;
            else dp[i] = (Integer.parseInt(s.substring(i,i+2))<=26) ? dp[i+1]+dp[i+2] : dp[i+1];
        }
        return dp[0];
    }
//http://www.geeksforgeeks.org/forums/topic/amazon-interview-question-for-software-engineerdeveloper-fresher-about-algorithms-data-structure/
//http://tianrunhe.wordpress.com/2012/07/14/number-of-ways-decoding-a-message-decode-ways/    
    /*
    public int numDecodings(String s) {
        ArrayList<Integer> solutions = new ArrayList<Integer>();
        if(s.length() != 0)
            recursion(s, solutions);
        return solutions.size();
    }
     
    private void recursion(String s, ArrayList<Integer> solutions) {
        if(s.length() == 0){
            solutions.add(1);
        } else {
            int value = Character.getNumericValue(s.charAt(0));
            if(value > 0 && value <= 9) {
                recursion(s.substring(1), solutions);
            }
             
            if(s.length() >= 2) {
                int value1 = Character.getNumericValue(s.charAt(0));
                int value2 = Character.getNumericValue(s.charAt(1));
                if(value1 == 1 && value2 >= 0 && value2 <= 9) {
                    recursion(s.substring(2), solutions);
                } else if(value1 == 2 && value2 >= 0 && value2 <= 6) {
                    recursion(s.substring(2), solutions);
                }
            }
        }
    }
    */
}
