Latest Version
===============
public class Solution {
    public String minWindow(String s, String t) {
        if(s == null || s.length() == 0) {
            return "";
        }
        if(t == null || t.length() == 0) {
            return "";
        }
        Map<Character,Integer> tMap = new HashMap<Character,Integer>();
        Map<Character,Integer> sMap = new HashMap<Character,Integer>();
        //to optimize by checking whether s 包括 t
        for(int i=0; i < s.length() ; i++) {
            char currChar = s.charAt(i);
            if(sMap.containsKey(currChar)) {
                sMap.put(currChar,sMap.get(currChar)+1);
            } else {
                sMap.put(currChar,1);
            }
        }
        for(int i=0; i < t.length(); i++) {
            char currChar = t.charAt(i);
            if(tMap.containsKey(currChar)) {
                tMap.put(currChar,tMap.get(currChar)+1);
            } else {
                tMap.put(currChar,1);
            }            
        }
        if(!isValid(tMap,sMap)) {
            return "";
        }
        Map<Character,Integer> cMap = new HashMap<Character,Integer>();
        int head = 0;
        int minHead = 0;
        int min = s.length();
        for(int i=0; i < s.length(); i++ ) {
            char curr = s.charAt(i);
            if(cMap.containsKey(curr)) {
                cMap.put(curr,cMap.get(curr)+1);
            } else {
                cMap.put(curr,1);
            }            
            while(isValid(tMap,cMap)) {
                if(min > (i-head+1)) {
                    minHead = head;
                    min = i-head+1;                
                }
                char remove = s.charAt(head++);
                if(cMap.get(remove) == 1) {
                    cMap.remove(remove);
                } else {
                    cMap.put(remove,cMap.get(remove)-1);
                }
            } 
        }
        return s.substring(minHead,minHead+min);
    }
    public boolean isValid(Map<Character,Integer> t, Map<Character,Integer> s) {
        for(char curr : t.keySet()) {
            if(!s.containsKey(curr)) {
                return false;
            } else {
                if(s.get(curr) < t.get(curr))
                    return false;
            }
        }    
        return true;
    }
}





//这题展示了怎么样即简单又易懂的写出一个好的算法来，
//把独立的功能用函数封装出去，这样问题规模就会缩小
import java.util.Comparator;
import java.util.PriorityQueue;
public class Solution {
    //判断S是否能包住T，即T中的字符个数要小于S中对应的字符个数
    //numList1 is S count, numList2 is T count
    public boolean valid(int[] numList1,int[] numList2) {
        for(int i=0; i < 256;i++) {
            if(numList1[i] < numList2[i])
                return false;
        }
        return true;
    }
    public String minWindow(String s, String t) {
        if(s.length() == 0 && t.length() ==0)
            return "";
        if(s.length() == 0)
            return "";
        int[] sCount = new int[256];
        int tCount[] = new int[256];
        int cCount[] = new int[256];
        int sizeS = s.length();
        int sizeT = t.length();
        if(sizeS < sizeT)
                return "";
        //统计S中各字符的个数
        for(int i=0; i < sizeS ; i++)
                sCount[s.charAt(i)]++;
        //统计T中各字符的个数
        for(int i=0; i < sizeT; i++)
                tCount[t.charAt(i)]++;
        if(!valid(sCount,tCount))
                return "";
        cCount[s.charAt(0)]++;
        int head = 0, tail = 0, minLen = sizeS,head_min = 0;
        while(tail < sizeS) {
                //如果不能包住,tail右移
                if(!valid(cCount,tCount)){
                        if (++tail < sizeS)
                                cCount[s.charAt(tail)]++;
                }
                else{
                        //如果全包住,head右移
                        if(tail-head+1 < minLen) {
                                //刷新最小window长度
                                minLen = tail-head+1;
                                head_min = head;
                        }
                        cCount[s.charAt(head++)]--;
                }
        }
        return s.substring(head_min,head_min+minLen);//返回最小window
    }
    public static void main(String args[]){
        Solution s = new Solution();
        String S = "ADOBECODEBANC";
        String T = "ABC";
        //solution : "BANC"
        System.out.println(s.minWindow(S,T));
    }
}
