public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
         if(obstacleGrid.length ==0 || obstacleGrid == null){
            return 0;
        }
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        int[][] dp=new int[m][n];
        if(obstacleGrid[0][0] == 1){
                dp[0][0]=0;
        }
        else{
                dp[0][0]=1;
        }
        for(int i=1;i<m;++i){
            if(obstacleGrid[i][0]==0){
                dp[i][0]=dp[i-1][0];
            }
            else{
                dp[i][0]=0;
            }
        }
        for(int j=1;j<n;++j){
            if(obstacleGrid[0][j]==0){
                dp[0][j]=dp[0][j-1];
            }
            else{
                dp[0][j]=0;
            }
        }
        for(int i=1;i<m;++i){
            for(int j=1;j<n;++j){
                if(obstacleGrid[i][j]==1){
                    dp[i][j]=0;
                }
                else{
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return dp[m-1][n-1];
    }
}



=================================================================
Recursive + Memoization
=================================================================


    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for(int i=0; i < m; i++) {
            for(int j=0; j <n; j++) {
                dp[i][j] = -1;
            }
        }
        return helper(dp,m,n,0,0,obstacleGrid);
    }
    public int helper(int[][] dp, int m, int n, int x, int y, int[][] obstacleGrid) {
        if(x < 0 || x >=m || y < 0 || y >=n || obstacleGrid[x][y] ==1) {
            return 0;
        }
        if(x == m-1 && y == n-1) {
            return 1;
        }
        if(dp[x][y] != -1)
            return dp[x][y];
        dp[x][y] = helper(dp,m,n,x+1,y,obstacleGrid) + helper(dp,m,n,x,y+1,obstacleGrid);
        return dp[x][y];
    }
