//https://leetcode.com/discuss/48477/a-recursive-java-solution-284-ms

public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        List<Integer> res = new ArrayList<Integer>();
        if(input == null || input.length() ==0) {
            return res;
        }
        for(int i=0; i < input.length(); i++) {
            if(isOperator(input.charAt(i))) {
                List<Integer> left = diffWaysToCompute(input.substring(0,i));
                List<Integer> right = diffWaysToCompute(input.substring(i+1));
                for(int j=0; j < left.size(); j++) {
                    for(int k=0; k < right.size(); k++) {
                        int sum=0;
                        if(input.charAt(i) == '+') {
                            sum = left.get(j)+right.get(k);
                        } else if(input.charAt(i) == '-') {
                            sum = left.get(j)-right.get(k);
                        } else if(input.charAt(i) == '*') {
                            sum = left.get(j)*right.get(k);
                        }
                        res.add(sum);
                    }
                }
            }
        }
        //only digit are there no operator in the input then put into res
        if(res.size() ==0) {
            res.add(Integer.parseInt(input));    
        }
        return res;
    }
    public boolean isOperator(char operator) {
        if(operator == '+' || operator == '-' || operator == '*')
            return true;
        return false;
    }
}
