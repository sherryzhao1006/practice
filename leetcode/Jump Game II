http://www.zhuangjingyang.com/leetcode-jump-game-jump-game-ii/
http://www.lintcode.com/en/problem/jump-game-ii/

跟jump game 一样原理。

dp[i]=到达第i个点需要的step的最小值
dp[i]==Max_value//cannot reach
     !=  Math.min(dp[j]+1,dp[i]);
[1,0,3,1]

    public int jump(int[] A) {
        int n = A.length;
        int[] dp = new int[n];
        for(int i=0; i < n; i++) {
            dp[i] = Integer.MAX_VALUE;    
        }
        dp[0] = 0;
        for(int i=0; i < n; i++) {
            for(int j=0; j < i; j++) {
                if(dp[j]!= Integer.MAX_VALUE && A[j] + j >=i){
                    dp[i] = Math.min(dp[i],dp[j]+1);
                } 
            }
        }
        return dp[n-1] == Integer.MAX_VALUE ? 0 : dp[n-1] ;
        // write your code here
    }





Recursive Solution
====================



    public int jump(int[] A) {
        int n = A.length;
        int[] min = new int[1];
        min[0] = Integer.MAX_VALUE;
        helper(A,n,0,0,min);
        return min[0];
    }
    public void helper(int[] A, int n, int index,int step,int[] min) {
        if(index >= n) {
            return;
        }
        if(index == n-1) {
            min[0] = Math.min(min[0],step);
        } else {
            int remStep = A[index];
            while(remStep > 0) {
                helper(A,n,index+remStep,step+1,min);
                remStep--;
            }
        }
    }
    
    With Memoization
    =================
    public int jump(int[] A) {
        int n = A.length;
        int[] min = new int[1];
        int[] dp = new int[A.length];
        for(int i=0; i < dp.length; i++) {
            dp[i] = -1;
        }
        return helper(A,n,0,dp);
    }
    public int helper(int[] A, int n, int index,int[] dp) {
        if(index >= n) {
            return Integer.MAX_VALUE;
        }
        if(dp[index] != -1)
            return dp[index];
        int min =Integer.MAX_VALUE;            
        if(index == n-1) {
            return 0;
        } else {
            int remStep = A[index];
            
            while(remStep > 0) {
                min = Math.min(min,helper(A,n,index+remStep,dp));
                remStep--;
            }
        }
        dp[index] = (min == Integer.MAX_VALUE ? Integer.MAX_VALUE : min+1);
        return dp[index];
    }    

Greedy Solution
====================

    //this one doesn't work if the input is not valid
    [2,3,1,1,4]
    i=0 step=0 max=2 count=0
    i=1 step=max=2, count=1 max=4
    i=2 step=max=4, count =2,max=4
    i=3 step=4,count=2
  public int jump(int[] A) {
         int step=0,max=0,count=0;
         for(int i=0;i<A.length;++i){
             if(i>step){
                 step=max;
                 ++count;
             }
             max=Math.max(max,i+A[i]);
         }
         return count;  
    }
