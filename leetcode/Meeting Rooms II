/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        if(intervals == null || intervals.length == 0)
            return 0;
        int n = intervals.length;
        int[] startArray = new int[n];
        int[] endArray = new int[n];
        for(int i=0; i < intervals.length; i++) {
            startArray[i] = intervals[i].start;
            endArray[i] = intervals[i].end;
        }
        Arrays.sort(startArray);
        Arrays.sort(endArray);
        int cnt = 0;
        int max = Integer.MIN_VALUE;
        int i=0,j=0;
        while(i < n && j < n) {
            if(startArray[i] < endArray[j]) {
                cnt++;
                i++;
            } else {
                cnt--;
                j++;
            }
            max = Math.max(cnt,max);
        }
        return max;
    }
}
