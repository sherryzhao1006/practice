//https://dl.dropboxusercontent.com/u/15824957/Lintcode/verifyPreOrder.png
Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.

You may assume each number in the sequence is unique.

Follow up:
Could you do it using only constant space complexity?


O(n) space solution (system stack)

public class Solution {
    public boolean verifyPreorder(int[] preorder) {
        int n = preorder.length;
        return helper(0,n-1,preorder);
    }
    public boolean helper(int l,int r,int[] preorder) {
        if(l >= r)
            return true;
        int i = l+1;
        int root = preorder[l];
        //in the photo, the current root is 8, so find next element greater than 8 to be the root of right subtree
        while(i <= r && preorder[i] < root)
            i++;
        int j=i;
        //in the photo, the current root is 8, so starting from the root of right subtree, find the element less than the current root. if so the j <=r in that case return false.
        while(j <=r && preorder[j] > root)
            j++;
        if(j <= r)
            return false;
        return helper(l+1,i-1,preorder) && helper(i,r,preorder);
    }
}
