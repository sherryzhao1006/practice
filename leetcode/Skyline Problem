//https://briangordon.github.io/2014/08/the-skyline-problem.html
//http://www.programcreek.com/2011/12/examples-to-demonstrate-comparable-vs-comparator-in-java/

/*
把每一个building拆成两个edge，一个入一个出。所有的edge加入到一个list中。再对这个list进行排序，排序顺序为：如果两个边的position不一样，那么按pos排，否则根据edge是入还是出来排。
根据position从前到后扫描每一个edge，将edge根据是入还是出来将当前height加入或者移除heap。再得到当前最高点来决定是否加入最终结果。非常巧妙，值得思考。
*/
 class Point {
    int x;
    int y;
    boolean isLeft;
    public Point(int x, int y, boolean isLeft) {
        this.x = x;
        this.y = y;
        this.isLeft = isLeft;
    }
}
class PointComparator implements Comparator<Point> {
    @Override
    public int compare(Point p1, Point p2) {
        if(p1.x != p2.x) {
        //if x values are different sort by x
            return p1.x - p2.x;
        } else if (p1.isLeft && p2.isLeft) {
        //x values are the same and all are start pts, sort by decreasing order (max to min) y
        /*
        if(point.isLeft) {
                if(heap.isEmpty() || point.y > heap.peek())
                    res.add(new int[]{point.x,point.y});
        if you don't sort by decreasing order, you will mistakenly put lower height point into solution set. 
        */        
            return p2.y - p1.y;
        } else if (!p1.isLeft && !p2.isLeft) {
        /*
            if you don't sort by increasing order of heights, you will pop heighest one first and put lowest height into the solution set.
        */
        //x values are the same and all are end pts, sort by increasing order(min to max) y
            return p1.y - p2.y;
        }
        return p1.isLeft ? -1 : 1;//end point first and start point later
        //-1 means p1 is moved after p2 in original order
        //compare(p1.x,p2.x)  ascending order
        //compare(p2.x,p1.x)  descending order
        //Example
        //1, 4
        //-1
        //7, 1
        //1    
    }
}

   
public class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
        List<int[]> output = new ArrayList<int[]>();
        if(buildings == null ||  buildings.length == 0 || buildings[0].length ==0)return  output;  
        ArrayList<Point> record = new ArrayList<Point>();
                
        for(int i = 0; i< buildings.length;i++){
            record.add(new Point(buildings[i][0],buildings[i][2],true));
            record.add(new Point(buildings[i][1],buildings[i][2],false));
        }
        Collections.sort(record,new PointComparator());
        //heap of height
        PriorityQueue<Integer> heap = new PriorityQueue<Integer>(10,Collections.reverseOrder());
        
        for(Point p : record){
            if(p.isLeft == true){
                if(heap.isEmpty() || p.y > heap.peek()){
                    output.add(new int[]{p.x,p.y});
                
                }
                heap.add(p.y);
            }else{
                heap.remove(p.y);
                if(heap.isEmpty() ){
                    output.add(new int[]{p.x,0});
                } else if(p.y > heap.peek() ){
                    output.add(new int[]{p.x,heap.peek()});
                }
            }
        
        }
        return output;
    }
}
