 Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9. 
dp[4] = 1+1+1+1 = 4
dp[4] = 1 
so n=4 solution is 1


//https://leetcode.com/discuss/62782/recursive-dfs-solution-in-java-which-i-believe-has-o-run-time
//add memoization to the recursive solution
/*
public class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n+1];
        for(int i=0; i <=n; i++) {
            dp[i] = -1;        
        }
        return helper(dp,n);
    }    
    public int helper(int[] dp,int n) {
        int res = n, num = 2;
        if(dp[n] != -1)
            return dp[n];
        while(num*num <=n) {
            int divisor = n/(num*num);
            int remainder = n%(num*num);
            res = Math.min(res,divisor+helper(dp,remainder));    
            num++;
        }
        dp[n] = res;
        return res;
    }   
}
*/




bottom-up DP solution
======================


public class Solution {
    /*
    dp[0]=0
    dp[1] = dp[0+1] = dp[0]+1=1
    dp[0+4] =dp[0+4] = dp[0]+1 = 1
    dp[0+9] = dp[0]+1 = 1
    
    dp[1+1] = dp[1]+1,dp[1+1]  = 2
    dp[1+4] = dp[1]+1,dp[5] = 2
    */
    
    public int numSquares(int n) {
            int[] dp=new int[n+1];
            Arrays.fill(dp,Integer.MAX_VALUE);
            dp[0]=0;
            for(int i=0;i<=n;++i){
                for(int j=1;i+j*j<=n;++j){
                    dp[i+j*j]=Math.min(dp[i]+1,dp[i+j*j]);
                }
            }
            return dp[n];
    }
}
