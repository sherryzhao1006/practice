
Naive Solution
==============

    // Add the number to an internal data structure.
    private List<Integer> list = new ArrayList<Integer>();
    public void add(int number) {
        list.add(number);
    }

    // Find if there exists any pair of numbers which sum is equal to the value.
    public boolean find(int value) {
        Set<Integer> set = new HashSet<Integer>();
        for(int i=0; i < list.size(); i++) {
            int rem = value - list.get(i);
            if(set.contains(rem)) {
                return true;
            } else {
                set.add(list.get(i));
            }
        }
        return false;
    }




Optimized Solution
==================


//http://www.programcreek.com/2014/03/two-sum-iii-data-structure-design-java/
Design and implement a TwoSum class. It should support the following operations: add and find.

add - Add the number to an internal data structure.
find - Find if there exists any pair of numbers which sum is equal to the value.

For example,
add(1); add(3); add(5);
find(4) -> true
find(7) -> false

public class TwoSum {

    // Add the number to an internal data structure.
    private Map<Integer,Integer> map = new HashMap<Integer,Integer>();
	public void add(int number) {
	    if(map.containsKey(number)) {
	        map.put(number,map.get(number)+1);
	    } else {
	        map.put(number,1);
	    }
	}

    // Find if there exists any pair of numbers which sum is equal to the value.
	public boolean find(int value) {
        for(int curr : map.keySet()) {
            int rem = value-curr;
            if(map.containsKey(rem)) {
                if(rem == curr && map.get(rem) < 2) { //for {4,4} case
                    continue;
                }
                return true;
            }
        }
        return false;
	}
}


// Your TwoSum object will be instantiated and called as such:
// TwoSum twoSum = new TwoSum();
// twoSum.add(number);
// twoSum.find(value);
