
Naive Solution
==============

    // Add the number to an internal data structure.
    private List<Integer> list = new ArrayList<Integer>();
    public void add(int number) {
        list.add(number);
    }

    // Find if there exists any pair of numbers which sum is equal to the value.
    public boolean find(int value) {
        Set<Integer> set = new HashSet<Integer>();
        for(int i=0; i < list.size(); i++) {
            int rem = value - list.get(i);
            if(set.contains(rem)) {
                return true;
            } else {
                set.add(list.get(i));
            }
        }
        return false;
    }




Optimized Solution
==================


//http://www.programcreek.com/2014/03/two-sum-iii-data-structure-design-java/
public class TwoSum {
 private HashMap<Integer,Integer> map;
    
    public TwoSum(){
        map = new HashMap<Integer,Integer>();
    }
    // Add the number to an internal data structure.
    public void add(int number) {
        if(map.containsKey(number)){
            map.put(number,map.get(number)+1);
        }else{
            map.put(number,1);
        }
        
        
    }

    // Find if there exists any pair of numbers which sum is equal to the value.
    //{4->1}
    //4  
    public boolean find(int value) {
       for(Integer i : map.keySet()){
           int cur  = value - i;
           
           if(map.containsKey(cur)){
               if(cur == i && map.get(cur)<2){
                   continue;
               }
               return true;
           }
       }
       return false;
    }
}


// Your TwoSum object will be instantiated and called as such:
// TwoSum twoSum = new TwoSum();
// twoSum.add(number);
// twoSum.find(value);
