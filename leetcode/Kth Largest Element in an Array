public class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        int n = nums.length;
        return helper(nums,k,0,n-1);
    }
    public int helper(int[] nums, int k, int start,int end){
        int left = start;
        int right = end;
        int pivotIndex=start;
        int pivot=nums[pivotIndex];
        int n = nums.length;
        //we need left <= right because of -1,2,0 case
        //-1,2 ,0
        //pivot
        //L,   ,R
        //  L/R (if you exit when left == right) then u swap R and pivot => 2,-1,0 (wrong)
        //
        while(left <= right) {
            //if left value is greater than pivot value, stop!
            while(left <= right && nums[left] <= pivot) {
                left++;//1
            }
            while(left <= right && nums[right] > pivot) {
                right--;
            }
            if(left < right) {
                swap(nums,left,right);
            }
        }
        swap(nums,right,pivotIndex);
        if(right == n-k){
            return nums[right];
        } else if(right > n-k) {
            return helper(nums,k,start,right-1);
        } else {
            return helper(nums,k,right+1,end);
        }
    }
    public void swap(int[] nums,int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }
}



==========================================================



    public int kthLargestElement(int k, ArrayList<Integer> numbers) {
         if(numbers == null || numbers.size() == 0){
                return 0;
            }
            return helper(k, numbers,0,numbers.size()-1);
    }
    public int helper(int k, ArrayList<Integer> numbers, int l, int r) {
        int lOrigin = l;
        int rOrigin = r;
        int pivotIndex = l;
        int pivot = numbers.get(pivotIndex);
        while(l <= r) {
            while(l <= r && numbers.get(l) <= pivot ) {
                l++;
            }
            while(l <= r && numbers.get(r) >= pivot) {
                r--;
            }
            if(l < r) {
                int temp = numbers.get(l);
                numbers.set(l,numbers.get(r));
                numbers.set(r,temp);
            }
        }
        //change with pivot and right index
        int temp = numbers.get(pivotIndex);
        numbers.set(pivotIndex,numbers.get(r));
        numbers.set(r,temp);
        int n = numbers.size();
        if( r+1 < n-k+1) {
            return helper(k,numbers,r+1,rOrigin);    
        } else if (r+1 > n-k+1) {
            return helper(k,numbers,lOrigin,r-1);
        } else {
            return numbers.get(r);
        }
    }
