Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.
 
According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, and the other N − h papers have no more than h citations each."

For example, given citations = [3, 0, 6, 1, 5], which means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers 
with at least 3 citations each and the remaining two with no more than 3 citations each, his h-index is 3.

这道题让我们求H指数，这个质数是用来衡量研究人员的学术水平的质数，定义为一个人的学术文章有n篇分别被引用了n次，那么H指数就是n。
而且wiki上直接给出了算法，可以按照如下方法确定某人的H指数：1、将其发表的所有SCI论文按被引次数从高到低排序；2、
从前往后查找排序后的列表，直到某篇论文的序号大于该论文被引次数。所得序号减一即为H指数。我也就没多想，直接按照上面的方法写出了代码：

http://www.cnblogs.com/grandyang/p/4781203.html
Example :  [3, 0, 6, 1, 5]

Sort : [6,5,3,1,0] 
i=0 , i=1, i=2 , i=3 > citations[3] so (previous 3 papers has more than 3 papers and 
remaining 2 papers has no more than 3 citations.

there can be more than one h-index.

Example : [3, 0, 2, 6, 1, 5]

Sort : [6 5 3 2 1 0]

i=0,i=1,i=2,i=3  (i=3 > citations[i] = 2 ) therefore hindex =3  (previous 3 papers has more than 3 papers and 
remaining 3 papers has no more than 3 citations.

Edge case : [100,200,300]
i=0,i=1,i=2, break loop, i=3
return i;

public class Solution {
    public static int hIndex(int[] citations) {
        Integer[] arr = new Integer[citations.length];
        for(int i=0; i < citations.length; i++) {
            arr[i] = citations[i];
        }
        Arrays.sort(arr,Collections.reverseOrder());
        for(int i=0; i < arr.length; i++) {
            if(i >= arr[i]) // if(i > arr[i]) need equals input :[0], output : 1, expected : 0
                return i;
        }
        return arr.length;
    }
}

input : 2 1 0
ans : 1

    //http://www.geeksforgeeks.org/counting-sort/
    public static int[] countSort(int[] arr) {
        if(arr == null || arr.length == 0)
            return null;
        if(arr.length == 1)
            return arr;

        int max = arr[0];
        int n = arr.length;
        for(int i=1; i < n; i++) {
            max = Math.max(arr[i],max);
        }

        int[] count = new int[max+1];
        for(int i=0; i < n; i++) {
            count[arr[i]]++;
        }
        for(int i=1; i <=max; i++) {
            count[i] += count[i-1];
        }
        int[] output = new int[n+1];
        for(int i=0; i <n; i++) {
            output[count[arr[i]]-1] = arr[i];
            count[arr[i]]--;
        }
        return output;
    }

H index using pure counting sort

/*
public class Solution {
    public static int hIndex(int[] citations) {
        if(citations == null || citations.length == 0)
            return 0;


        int max = citations[0];
        int n = citations.length;
        for(int i=1; i < n; i++) {
            max = Math.max(citations[i],max);
        }

        int[] count = new int[max+1];
        for(int i=0; i < n; i++) {
            count[citations[i]]++;
        }
        for(int i=1; i <=max; i++) {
            count[i] += count[i-1];
        }
        int[] output = new int[n+1];
        for(int i=0; i <n; i++) {
            output[n-count[citations[i]]] = citations[i];
            count[citations[i]]--;
        }
        for(int i=0; i <n; i++) {
            if(i >= output[i])
                return i;
        }
        return n;
    }
}
*/

the above solution doesn't work so put everything > n into last bucket fixed it
public class Solution {
    public static int hIndex(int[] citations) {
        if(citations == null || citations.length == 0)
            return 0;


        int n = citations.length;


        int[] count = new int[n+1];
        for(int i=0; i < n; i++) {
            if(citations[i] > n) {
                count[n]++;
            } else
                count[citations[i]]++;
        }
        for(int i=1; i <=n; i++) {
            count[i] += count[i-1];
        }
        int[] output = new int[n];
        for(int i=0; i <n; i++) {
            int lookup = citations[i] > n ? n : citations[i];
            output[n-count[lookup]] = citations[i];
            count[lookup]--;
        }
        for(int i=0; i <n; i++) {
            if(i >= output[i])
                return i;
        }
        return n;
    }
}

