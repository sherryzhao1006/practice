http://fisherlei.blogspot.com/2013/11/leetcode-wordbreak-ii-solution.html
Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"].
    
    
    
    public List<String> wordBreak(String s, Set<String> wordDict) {
        List<String> res = new ArrayList<String>();
        if(s == null || s.length() == 0)
            return res;
        Map<Integer,Boolean> dp = new HashMap<Integer,Boolean>();
        helper(s,wordDict,0,dp,res,new StringBuilder());    
        return res; 
    }
    public void helper(String s, Set<String> wordDict, int pos, Map<Integer,Boolean> dp,List<String> res, StringBuilder currRes) {
        if(dp.containsKey(pos)) {
            return;
        }
        for(int i=pos; i < s.length(); i++) {
            String curr = s.substring(pos,i+1);
            if(wordDict.contains(curr)) {
                currRes.append(" "+curr);
                if(s.length()-1 == i) {
                    //store the currRes into res(list<String>)                    
                    res.add(currRes.toString().trim());
                    currRes.delete(currRes.length()-curr.length()-1,currRes.length());
                    return;
                }
                int beforeChange = res.size();
                helper(s,wordDict,i+1,dp,res,currRes);
                //the size of res remains the same after recursion means starting from i+1 is invalid result
                //no need to recurse.
                if(beforeChange == res.size()) {
                    dp.put(i+1,false);
                }
                //aa bb
                currRes.delete(currRes.length()-curr.length()-1,currRes.length());
            }
        }
    } 
