Recursive with memoization
===========================

public class Solution {
    public int climbStairs(int n) {
        int[] dp = new int[n+1];
        for(int i=0; i <= n; i++) {
            dp[i] = -1;
        }
        return helper(dp,n);
    }
    public int helper(int[] dp,int n) {
        if(n < 0)
            return 0;
        if(n == 0)
            return 1;
        if(dp[n] != -1)
            return dp[n];
        dp[n] = helper(dp,n-1) + helper(dp,n-2);
        return dp[n];
    }
}

DP (bottom-up)
===========================

    public int climbStairs(int n){
        if(n == 0 || n == 1 || n == 2){
            return n;
        }
        int[] dp=new int[n+1];
        dp[1]=1;
        dp[2]=2;
        for(int i=3;i<=n;++i){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
