https://www.youtube.com/watch?v=Mbav2iuJ7xQ
http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=140246&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26sortid%3D311


 //num[1] != num[5],所以查看dp[1][4]=dp(1到4中最长palindrome）和dp[2][5] = dp(2,5)(2到5中最长的）最大值
            
 public static int find(int[] num){
    int[][] dp=new int[num.length][num.length];
    for(int i=0;i<num.length;++i){
      dp[i][i]=1;
      for(int j=i-1;j>=0;--j){
        if(num[i]==num[j]){
          dp[j][i]=(i-j)<2?2:dp[j+1][i-1]+2;
        }
        else{
          dp[j][i]=Math.max(dp[j][i-1],dp[j+1][i]);
        }
      }
    }
    return dp[0][num.length-1];
  }            


String s = "PAYBZBA"
             
             dp[0][0] = 1
             dp[1][1] = 1
             dp[0][1] = 1
             dp[2][2] = 1
             dp[1][2] = Math.max(dp[2][2],dp[1][1]) = 1
             dp[0][2] = Math.max(dp[1][2],dp[0][1]) = 1
             dp[3][3] = 1
             dp[2][3] = Math.max(dp[3][3],dp[2][2]) = 1
             dp[1][3] = Math.max(dp[2][3],dp[1][2]) = 1
             dp[0][3] = Math.max(dp[1][3],dp[0][2])= 1
             dp[4][4] = 1
             dp[3][4] = Math.max(dp[4][4],dp[3][3]) = 1
             dp[2][4] = Math.max(dp[3][4],dp[2][3] = 1
             dp[1][4] = Math.max(dp[2][4],dp[1][3])  = 1
             dp[0][4] = Math.max(dp[1][4],dp[0][3] = 1
             dp[5][5] = 1
             dp[4][5] = Math.max(dp[5][5],dp[4][4]) = 1
             dp[3][5] = dp[4][4]+2 = 1+2 = 3
             dp[2][5] = Math.max(dp[3][5],dp[2][4]) = dp[3][5] = 3
             dp[1][5] = Math.max(dp[2][5],dp[1][4]) = dp[2][5] = 3
             dp[0][5] = Math.max(dp[1][5],dp[0][4]) = dp[1][5] = 3
             dp[6][6] = 1
             dp[5][6] = math.max(dp[6][6],dp[5][5]) = 1
             dp[4][6] = math.max(dp[5][6],dp[4][5]) = 1
             dp[3][6] = Math.max(dp[4][6],dp[3][5]) = dp[3][5] = 3
             dp[2][6] = Math.max(dp[3][6],dp[2][5]) = dp[3][6] = 3
             dp[1][6] = dp[2][5] +2 = 3+2 = 5
             
             dp[1][5]=Math.max(dp[2][5], dp[1][4]) 
           
public static int find(int[] num){
    int[][] dp=new int[num.length][num.length];
    for(int i=0; i < num.length; i++) {
        for(int j=i; j >=0; j--) {
            if(num[i] == num[j]) {
                dp[j][i] = (i-j <2) ? i-j+1 : dp[j+1][i-1] +2;
            }else {
                dp[j][i] = Math.max(dp[j+1][i],dp[j][i-1]);
            }
        }
    }
    return dp[0][num.length-1];
}
